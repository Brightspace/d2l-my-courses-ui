From 1396ed7ace853f68d0768b1c2177d29a73abeb45 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Thu, 23 Jun 2016 18:58:42 -0500
Subject: [PATCH 01/18] Initial commit - doesn't work but a good start

---
 d2l-all-courses.html                |  4 ++
 d2l-course-management-behavior.html | 79 ++++++++++++++++++++++++++++++++++++-
 d2l-course-tile-region-styles.html  |  6 +++
 d2l-course-tile-styles.html         | 22 +++++++++++
 d2l-course-tile.html                |  1 +
 5 files changed, 111 insertions(+), 1 deletion(-)

diff --git a/d2l-all-courses.html b/d2l-all-courses.html
index 386bc1f..c84aea1 100644
--- a/d2l-all-courses.html
+++ b/d2l-all-courses.html
@@ -68,6 +68,10 @@
 				var itemCount = Math.max(this.pinnedCoursesEntities.length, this.unpinnedCoursesEntities.length);
 
 				return itemCount;
+			},
+			fakePinnedCourseInsertion: function(columns) {
+				var container = Polymer.dom(this.root).querySelector('.my-courses-container');
+				this._animateTileSlide(container, true, 0, columns);
 			}
 		});
 	</script>
diff --git a/d2l-course-management-behavior.html b/d2l-course-management-behavior.html
index 7eb9748..12a0046 100644
--- a/d2l-course-management-behavior.html
+++ b/d2l-course-management-behavior.html
@@ -142,7 +142,84 @@
 			_onPinnedCoursesEntitiesChanged: function(newArray) {
 				this._hasPinnedCourses = !newArray.base || newArray.base.length > 0;
 			},
-			_tilesInPinStateTransition: null
+			_tilesInPinStateTransition: null,
+			_animateTileSlide: function(container, isInsertion, position, columns) {
+				// Get all course tiles in container
+				var courseTiles = container.querySelectorAll('d2l-course-tile');
+				var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
+				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
+				var parentRect = container.getBoundingClientRect();
+				// We need to know course tile properties prior to any animation taking place
+  				var courseTileRects = this._getItemPositions(courseTiles);
+
+				this.customStyle['--container-width'] = container.offsetWidth + 'px';
+				this.customStyle['--container-height'] = container.offsetHeight + 'px';
+				this.toggleClass('animate', true, container);
+
+				this.updateStyles();
+
+				for(var i = 0; i < courseTiles.length; i++) {
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+					var containerWidth = courseTile.offsetWidth * columns;
+					var currCol = (courseTileRect.left - parentRect.left - 8) + 'px';
+					var currRow = (courseTileRect.top - parentRect.top) + 'px';
+					var newCol = (((courseTile.offsetWidth + courseTileRect.left) - parentRect.left) % container.offsetWidth) - 10;
+					var newRow = rowOffsets[Math.floor((i + 1) / columns)] + 'px';
+
+					if ((i % columns) === (columns - 1)) {
+						newCol = 0;
+					}
+
+					newCol += 'px';
+
+					courseTile.customStyle['--col'] = currCol;
+					courseTile.customStyle['--row'] = currRow;
+					courseTile.customStyle['--new-col'] = newCol;
+					courseTile.customStyle['--new-row'] = newRow;
+					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+					courseTile.updateStyles();
+
+					courseTile.classList.add('animate');
+				};
+
+				this.updateStyles();
+
+			},
+			_getNewRowOffsets: function(container, items, columns) {
+				var numRows = Math.floor(items.length/columns) + 1;
+				var rowOffsets = Array.apply(null, Array(numRows)).map(function() {return 0;});
+
+				for(var count = 0; count <= items.length - 1; count++)  {
+					var currRow = Math.floor(count / columns);
+					var nextRow = currRow + 1;
+					var itemHeight = items[count].offsetHeight;
+
+					if((count % columns) === (columns - 1)) {
+						// Will go into next row
+						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight);
+					} else {
+						// Will go into same row
+						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight);
+					}
+				}
+
+				for(count = 1; count < rowOffsets.length; count++) {
+				rowOffsets[count] += rowOffsets[count - 1];
+				}
+
+				return rowOffsets;
+			},
+			_getItemPositions: function(elements) {
+				// Gets item offsets prior to animation
+				var boundingRects = [];
+
+				elements.forEach(function(element) {
+					boundingRects.push(element.getBoundingClientRect());
+				});
+
+				return boundingRects;
+			}
 		};
 	})();
 </script>
diff --git a/d2l-course-tile-region-styles.html b/d2l-course-tile-region-styles.html
index 59bf47d..c58b489 100644
--- a/d2l-course-tile-region-styles.html
+++ b/d2l-course-tile-region-styles.html
@@ -14,6 +14,12 @@
 			margin-left: -10px;	/* To offset 10px left padding on tile containers, where tile image left edge must align with headers */
 		}
 
+		.my-courses-container.animate {
+			position: relative;
+			width: var(--container-width);
+			height: var(--container-height);
+		}
+
 		d2l-course-tile {
 			width: 100%;
 		}
diff --git a/d2l-course-tile-styles.html b/d2l-course-tile-styles.html
index 64204f9..742bed1 100644
--- a/d2l-course-tile-styles.html
+++ b/d2l-course-tile-styles.html
@@ -190,6 +190,28 @@
 				opacity: 0;
 			}
 		}
+
+
+		:host(.animate) {
+			animation-name: slideover;
+			animation-duration: 1.0s;
+			animation-delay: var(--delay);
+			animation-fill-mode: both;
+			position: absolute;
+		}
+
+		:host(.animate-insertion) {
+			position: absolute;
+		}
+
+		@keyframes slideover {
+			from {
+				transform: translate(var(--col), var(--row));
+			}
+			to {
+				transform: translate(var(--new-col), var(--new-row));
+			}
+		}
 		</style>
 	</template>
 </dom-module>
diff --git a/d2l-course-tile.html b/d2l-course-tile.html
index 8da0bee..97810c2 100644
--- a/d2l-course-tile.html
+++ b/d2l-course-tile.html
@@ -123,6 +123,7 @@
 				if (this.animateInsertion) {
 					var tileContainer = this.$$('.tile-container');
 					this.toggleClass('animate-insertion', true, tileContainer);
+					this.toggleClass('animate-insertion', true, this);
 				}
 			},
 			updatePreferencesOnResponse: function(response) {
-- 
2.7.2.windows.1


From 63c86575eb0487791839e0a88b40b231fbc289b2 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Fri, 24 Jun 2016 10:49:12 -0500
Subject: [PATCH 02/18] More kinda sorta working, including container resizing
 when new row added - but timings are still static, not really working with
 insertion, definitely not working on removal,

---
 d2l-course-management-behavior.html | 49 ++++++++++++++++++++++++++++---------
 d2l-course-tile-region-styles.html  | 16 ++++++++++--
 d2l-course-tile.html                |  1 +
 3 files changed, 53 insertions(+), 13 deletions(-)

diff --git a/d2l-course-management-behavior.html b/d2l-course-management-behavior.html
index 12a0046..2237e95 100644
--- a/d2l-course-management-behavior.html
+++ b/d2l-course-management-behavior.html
@@ -144,6 +144,12 @@
 			},
 			_tilesInPinStateTransition: null,
 			_animateTileSlide: function(container, isInsertion, position, columns) {
+				var leftMarginPct = [
+					[0], //1
+					[0, .01666], //2
+					[0, .0112, .0224], //3
+					[0, .009, .018, .027] //4
+				]
 				// Get all course tiles in container
 				var courseTiles = container.querySelectorAll('d2l-course-tile');
 				var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
@@ -151,27 +157,40 @@
 				var parentRect = container.getBoundingClientRect();
 				// We need to know course tile properties prior to any animation taking place
   				var courseTileRects = this._getItemPositions(courseTiles);
+				var containerWidth = container.offsetWidth;
+				var containerHeight = container.offsetHeight;
 
-				this.customStyle['--container-width'] = container.offsetWidth + 'px';
-				this.customStyle['--container-height'] = container.offsetHeight + 'px';
+				this.customStyle['--container-width'] = containerWidth + 'px';
+				this.customStyle['--container-height'] = containerHeight + 'px';
+				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
 				this.toggleClass('animate', true, container);
 
 				this.updateStyles();
 
+				setTimeout(function(container) {
+					this.toggleClass('animate', false, container);
+				}.bind(this, container), 4000);
+
 				for(var i = 0; i < courseTiles.length; i++) {
 					var courseTile = courseTiles[i];
 					var courseTileRect = courseTileRects[i];
-					var containerWidth = courseTile.offsetWidth * columns;
-					var currCol = (courseTileRect.left - parentRect.left - 8) + 'px';
-					var currRow = (courseTileRect.top - parentRect.top) + 'px';
-					var newCol = (((courseTile.offsetWidth + courseTileRect.left) - parentRect.left) % container.offsetWidth) - 10;
-					var newRow = rowOffsets[Math.floor((i + 1) / columns)] + 'px';
-
-					if ((i % columns) === (columns - 1)) {
-						newCol = 0;
+					var containerWidth = container.offsetWidth;
+					var currCol = Math.floor(courseTileRect.left - parentRect.left);
+					var currRow = (courseTileRect.top - parentRect.top);
+					var nextCol = (i + 1) % columns;
+					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
+					var newCol = courseTile.offsetWidth * nextCol;
+
+					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+
+					if((i % columns) !== 0) {
+						currCol -= 6;
 					}
 
+					currCol = currCol + 'px';
+					currRow = currRow + 'px';
 					newCol += 'px';
+					newRow += 'px';
 
 					courseTile.customStyle['--col'] = currCol;
 					courseTile.customStyle['--row'] = currRow;
@@ -181,8 +200,16 @@
 					courseTile.updateStyles();
 
 					courseTile.classList.add('animate');
+
+					setTimeout(function() {
+						this.classList.remove('animate');
+					}.bind(courseTile), 2000);
 				};
 
+				setTimeout(function() {
+					this.toggleClass('animate', true, container);
+				}.bind(this), 2000);
+
 				this.updateStyles();
 
 			},
@@ -205,7 +232,7 @@
 				}
 
 				for(count = 1; count < rowOffsets.length; count++) {
-				rowOffsets[count] += rowOffsets[count - 1];
+					rowOffsets[count] += rowOffsets[count - 1];
 				}
 
 				return rowOffsets;
diff --git a/d2l-course-tile-region-styles.html b/d2l-course-tile-region-styles.html
index c58b489..f28a20f 100644
--- a/d2l-course-tile-region-styles.html
+++ b/d2l-course-tile-region-styles.html
@@ -16,8 +16,20 @@
 
 		.my-courses-container.animate {
 			position: relative;
-			width: var(--container-width);
-			height: var(--container-height);
+			animation-name: expand-container;
+			animation-duration: 1.0s;
+			animation-fill-mode: both;
+		}
+
+		@keyframes expand-container {
+			from {
+				width: var(--container-width);
+				height: var(--container-height);
+			}
+			to {
+				width: var(--container-width);
+				height: var(--container-height-new);
+			}
 		}
 
 		d2l-course-tile {
diff --git a/d2l-course-tile.html b/d2l-course-tile.html
index 97810c2..bbf24f4 100644
--- a/d2l-course-tile.html
+++ b/d2l-course-tile.html
@@ -273,6 +273,7 @@
 				} else if (e.animationName.includes('scale-and-fade-in')) {
 					var tileContainer = this.$$('.tile-container');
 					this.toggleClass('animate-insertion', false, tileContainer);
+					this.toggleClass('animate-insertion', false, this);
 				}
 			},
 			pendingPinAction: false,
-- 
2.7.2.windows.1


From 694a7c8c9b114e917788acb00fcb23239b738333 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Sat, 25 Jun 2016 17:33:39 -0500
Subject: [PATCH 03/18] Checkpoint.. not tested

---
 d2l-course-management-behavior.html | 155 +++++------------------
 d2l-course-tile-region.html         | 245 ++++++++++++++++++++++++++++++++++++
 d2l-course-tile.html                |  12 +-
 3 files changed, 288 insertions(+), 124 deletions(-)
 create mode 100644 d2l-course-tile-region.html

diff --git a/d2l-course-management-behavior.html b/d2l-course-management-behavior.html
index 2237e95..0ed053e 100644
--- a/d2l-course-management-behavior.html
+++ b/d2l-course-management-behavior.html
@@ -21,6 +21,16 @@
 					value: [],
 					notify: true
 				},
+				pinnedCoursesEntitiesPending: {
+					type: Array,
+					value: [],
+					notify: true
+				},
+				unpinnedCoursesEntitiesPending: {
+					type: Array,
+					value: [],
+					notify: true
+				},
 				_hasPinnedCourses: {
 					type: Boolean,
 					value: false
@@ -28,12 +38,16 @@
 				_hasCourses: {
 					type: Boolean,
 					value: false
+				},
+				usePendingLists: {
+					type: Boolean,
+					value: true
 				}
 			},
 			listeners: {
 				'course-pinned': '_onCoursePinned',
 				'course-unpinned': '_onCourseUnpinned',
-				'tile-remove-complete': '_onCourseTileRemoveAnimationComplete'
+				'tile-remove-complete': '_onTileRemoveComplete'
 			},
 			observers: [
 				'_onPinnedCoursesEntitiesChanged(pinnedCoursesEntities.*)'
@@ -75,7 +89,7 @@
 			_onCourseUnpinned: function(e) {
 				this._ariaAnnounce(this.localize('unpinActionResult', 'course', e.detail.course.properties.name));
 			},
-			_onCourseTileRemoveAnimationComplete: function(e) {
+			_onTileRemoveComplete: function(e) {
 				if (e.detail.pinned) {
 					this._moveCourseToPinnedList(e.detail.course);
 				} else {
@@ -84,24 +98,21 @@
 
 				e.stopPropagation();
 			},
-			removeCourseFromTransitionList: function(courseID) {
-				var index = this._tilesInPinStateTransition.indexOf(courseID);
-
-				if (index !== -1) {
-					this._tilesInPinStateTransition.splice(index, 1);
-					return true;
-				}
-
-				return false;
-			},
 			_moveCourseToPinnedList: function(course) {
 				// Remove course from unpinned list, add to pinned
 				for (var index = 0; index < this.unpinnedCoursesEntities.length; index++) {
 					if (this.unpinnedCoursesEntities[index].properties.id === course.properties.id) {
 						var foundCourse = this.unpinnedCoursesEntities[index];
 						this._setEnrollmentPinData(foundCourse, true);
-						this._tilesInPinStateTransition.push(course.properties.id);
-						this.unshift('pinnedCoursesEntities', foundCourse);
+
+						// If enabled, add to list of "to be added" pinned entities, and let consumer move to pinned list when desired
+						if(this.usePendingLists) {
+							this.push('pinnedCoursesEntitiesPending', foundCourse);
+						} else {
+							this._tilesInPinStateTransition.push(course.properties.id);
+							this.unshift('pinnedCoursesEntities', foundCourse);
+						}
+
 						this.splice('unpinnedCoursesEntities', index, 1);
 						break;
 					}
@@ -113,9 +124,16 @@
 					if (this.pinnedCoursesEntities[index].properties.id === course.properties.id) {
 						var foundCourse = this.pinnedCoursesEntities[index];
 						this._setEnrollmentPinData(foundCourse, false);
-						this._tilesInPinStateTransition.push(course.properties.id);
 						this.splice('pinnedCoursesEntities', index, 1);
-						this.unshift('unpinnedCoursesEntities', foundCourse);
+
+						// If enabled, add to list of "to be added" unpinned entities, and let consumer move to unpinned list when desired
+						if(this.usePendingLists) {
+							this.push('unpinnedCoursesEntitiesPending', foundCourse);
+						} else {
+							this._tilesInPinStateTransition.push(course.properties.id);
+							this.unshift('unpinnedCoursesEntities', foundCourse);
+						}
+
 						break;
 					}
 				}
@@ -141,111 +159,6 @@
 			},
 			_onPinnedCoursesEntitiesChanged: function(newArray) {
 				this._hasPinnedCourses = !newArray.base || newArray.base.length > 0;
-			},
-			_tilesInPinStateTransition: null,
-			_animateTileSlide: function(container, isInsertion, position, columns) {
-				var leftMarginPct = [
-					[0], //1
-					[0, .01666], //2
-					[0, .0112, .0224], //3
-					[0, .009, .018, .027] //4
-				]
-				// Get all course tiles in container
-				var courseTiles = container.querySelectorAll('d2l-course-tile');
-				var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
-				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
-				var parentRect = container.getBoundingClientRect();
-				// We need to know course tile properties prior to any animation taking place
-  				var courseTileRects = this._getItemPositions(courseTiles);
-				var containerWidth = container.offsetWidth;
-				var containerHeight = container.offsetHeight;
-
-				this.customStyle['--container-width'] = containerWidth + 'px';
-				this.customStyle['--container-height'] = containerHeight + 'px';
-				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
-				this.toggleClass('animate', true, container);
-
-				this.updateStyles();
-
-				setTimeout(function(container) {
-					this.toggleClass('animate', false, container);
-				}.bind(this, container), 4000);
-
-				for(var i = 0; i < courseTiles.length; i++) {
-					var courseTile = courseTiles[i];
-					var courseTileRect = courseTileRects[i];
-					var containerWidth = container.offsetWidth;
-					var currCol = Math.floor(courseTileRect.left - parentRect.left);
-					var currRow = (courseTileRect.top - parentRect.top);
-					var nextCol = (i + 1) % columns;
-					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
-					var newCol = courseTile.offsetWidth * nextCol;
-
-					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
-
-					if((i % columns) !== 0) {
-						currCol -= 6;
-					}
-
-					currCol = currCol + 'px';
-					currRow = currRow + 'px';
-					newCol += 'px';
-					newRow += 'px';
-
-					courseTile.customStyle['--col'] = currCol;
-					courseTile.customStyle['--row'] = currRow;
-					courseTile.customStyle['--new-col'] = newCol;
-					courseTile.customStyle['--new-row'] = newRow;
-					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
-					courseTile.updateStyles();
-
-					courseTile.classList.add('animate');
-
-					setTimeout(function() {
-						this.classList.remove('animate');
-					}.bind(courseTile), 2000);
-				};
-
-				setTimeout(function() {
-					this.toggleClass('animate', true, container);
-				}.bind(this), 2000);
-
-				this.updateStyles();
-
-			},
-			_getNewRowOffsets: function(container, items, columns) {
-				var numRows = Math.floor(items.length/columns) + 1;
-				var rowOffsets = Array.apply(null, Array(numRows)).map(function() {return 0;});
-
-				for(var count = 0; count <= items.length - 1; count++)  {
-					var currRow = Math.floor(count / columns);
-					var nextRow = currRow + 1;
-					var itemHeight = items[count].offsetHeight;
-
-					if((count % columns) === (columns - 1)) {
-						// Will go into next row
-						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight);
-					} else {
-						// Will go into same row
-						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight);
-					}
-				}
-
-				for(count = 1; count < rowOffsets.length; count++) {
-					rowOffsets[count] += rowOffsets[count - 1];
-				}
-
-				return rowOffsets;
-			},
-			_getItemPositions: function(elements) {
-				// Gets item offsets prior to animation
-				var boundingRects = [];
-
-				elements.forEach(function(element) {
-					boundingRects.push(element.getBoundingClientRect());
-				});
-
-				return boundingRects;
 			}
 		};
 	})();
diff --git a/d2l-course-tile-region.html b/d2l-course-tile-region.html
new file mode 100644
index 0000000..8659c97
--- /dev/null
+++ b/d2l-course-tile-region.html
@@ -0,0 +1,245 @@
+<link rel="import" href="../polymer/polymer.html">
+<link rel="import" href="../d2l-ajax/d2l-ajax.html">
+<link rel="import" href="../d2l-siren-parser/d2l-siren-parser.html">
+<link rel="import" href="../d2l-link/d2l-link.html">
+<link rel="import" href="d2l-my-courses-styles.html">
+<link rel="import" href="d2l-alert.html">
+<link rel="import" href="d2l-course-tile.html">
+<link rel="import" href="d2l-simple-overlay.html">
+<link rel="import" href="d2l-all-courses.html">
+<link rel="import" href="d2l-course-tile-region-behavior.html">
+<link rel="import" href="localize-behavior.html">
+<link rel="import" href="d2l-interaction-detection-behavior.html">
+<link rel="import" href="d2l-course-management-behavior.html">
+
+<dom-module id="d2l-my-courses">
+	<template>
+		<style include="d2l-my-courses-styles"></style>
+		<div class="my-courses-container">
+			<template is="dom-repeat" items="{{courseEntities}}">
+				<d2l-course-tile
+					enrollment="[[courseEntity]]"
+					hover-enabled="[[_hoverInteractionEnabled]]"
+					touch-enabled="[[_touchInteractionEnabled]]"
+					animate-insertion="[[removeCourseFromTransitionList(courseEntity.properties.id)]]"
+					animate-insertion-automatically=false>
+				</d2l-course-tile>
+			</template>
+		</div>
+	</template>
+
+	<script>
+		Polymer({
+			is: 'd2l-course-tile-region',
+			properties: {
+				courseEntities: {
+					type: Array,
+					notify: true,
+					value: function() {
+						return [];
+					}
+				}
+				_newCourseEntities: {
+					type: Array
+				}
+			},
+			behaviors: [
+				Polymer.D2L.MyCourses.CourseTileRegionBehavior,
+				Polymer.D2L.MyCourses.InteractionDetectionBehavior
+			],
+			observers: [
+				'_onNewCourseEntitiesChanged(_newCourseEntities)'
+			],
+			created: function() {
+				this._tilesInPinStateTransition = [];
+			},
+			_onNewCourseEntitiesChanged: function(newCourseEntities) {
+				// For now, assume there will only be one entity being added at a time before being removed - might not affect implementation,
+				// but for simplicity, that's how's I'm writin' it.
+				var newCourse = newCourseEntities[0];
+
+				//*******************************
+				// Set up pre-animation stuff:
+				// 	*Save all of the existing tile/container positions, for intitial positioning
+				//  *Set all initial positions/sizes/whatever on elements
+				// 	*Set absolute positioning/etc on elements, so that new course tile won't break anything when we insert it
+				//   	* May have to have a "pre-animation" CSS class
+				//******************************
+				// Get all course tiles in container
+				var container = this.querySelector('.my-courses-container');
+				var courseTiles = container.querySelectorAll('d2l-course-tile');
+				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
+				var parentRect = container.getBoundingClientRect();
+				// We need to know course tile properties prior to any animation taking place
+  				var courseTileRects = this._getItemPositions(courseTiles);
+				var containerWidth = container.offsetWidth;
+				var containerHeight = container.offsetHeight;
+
+				// Set initial values for container
+				this.customStyle['--container-width'] = containerWidth + 'px';
+				this.customStyle['--container-height'] = containerHeight + 'px';
+
+				// Set intial values for course tiles
+				for(var i = 0; i < courseTiles.length; i++) {
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+
+					courseTile.customStyle['--col'] = Math.floor(courseTileRect.left - parentRect.left); + 'px';
+					courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
+					courseTile.updateStyles();
+				};
+
+				//*******************************
+				// Add new course tile:
+				// 	*Ensure course tile info is set in "in-transition" list(s), including delay
+				// 	*Prepend to course entities list - delay until now as it affects the DOM
+				//*******************************
+				this._tilesInPinStateTransition.push(newCourse.properties.id);
+				this._nextCourseInsertionDelaySecs = 1.0;
+				this.unshift('coursesEntities', newCourse);
+
+				// Calculate new row/container heights, now that we have the height of the new tile
+				// @NOTE: Do we have to listen for a dom-change event first, to make sure the tile's been inserted?
+				// Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
+				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
+				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
+				courseTiles = container.querySelectorAll('d2l-course-tile');
+				var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
+
+				// Set new positions for course tiles
+				for(var i = 0; i < courseTiles.length; i++) {
+					var leftMarginPct = [
+						[0], //1 column
+						[0, .01666], //2 columns
+						[0, .0112, .0224], //3 columns
+						[0, .009, .018, .027] //4 columns
+					];
+
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+					var containerWidth = container.offsetWidth;
+					var nextCol = (i + 1) % columns;
+					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
+					var newCol = courseTile.offsetWidth * nextCol;
+
+					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+
+					if((i % columns) !== 0) {
+						currCol -= 6;
+					}
+
+					courseTile.customStyle['--new-col'] = newCol + 'px';
+					courseTile.customStyle['--new-row'] = newRow + 'px';
+					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+					courseTile.updateStyles();
+				};
+
+				// Set new container height
+				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
+				this.toggleClass('animate', true, container);
+
+				// Let loose the dogs of war (that is, start animation)
+				this.toggle('animate', true, this.$$('.my-courses-container'));
+			},
+			_tilesInPinStateTransition: null,
+			_nextCourseInsertionDelaySecs: 0,
+			_animateTileSlide: function(container, isInsertion, position, columns) {
+				// Resize container
+				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
+				this.toggleClass('animate', true, container);
+
+				this.updateStyles();
+
+				setTimeout(function(container) {
+					this.toggleClass('animate', false, container);
+				}.bind(this, container), 4000);
+
+				for(var i = 0; i < courseTiles.length; i++) {
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+					var containerWidth = container.offsetWidth;
+					var currCol = Math.floor(courseTileRect.left - parentRect.left);
+					var currRow = (courseTileRect.top - parentRect.top);
+					var nextCol = (i + 1) % columns;
+					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
+					var newCol = courseTile.offsetWidth * nextCol;
+
+					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+
+					if((i % columns) !== 0) {
+						currCol -= 6;
+					}
+
+					currCol = currCol + 'px';
+					currRow = currRow + 'px';
+					newCol += 'px';
+					newRow += 'px';
+
+					courseTile.customStyle['--col'] = currCol;
+					courseTile.customStyle['--row'] = currRow;
+					courseTile.customStyle['--new-col'] = newCol;
+					courseTile.customStyle['--new-row'] = newRow;
+					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+					courseTile.updateStyles();
+
+					courseTile.classList.add('animate');
+
+					setTimeout(function() {
+						this.classList.remove('animate');
+					}.bind(courseTile), 2000);
+				};
+
+				setTimeout(function() {
+					this.toggleClass('animate', true, container);
+				}.bind(this), 2000);
+
+				this.updateStyles();
+
+			},
+			_getNewRowOffsets: function(container, items, columns) {
+				var numRows = Math.floor(items.length/columns) + 1;
+				var rowOffsets = Array.apply(null, Array(numRows)).map(function() {return 0;});
+
+				for(var count = 0; count <= items.length - 1; count++)  {
+					var currRow = Math.floor(count / columns);
+					var nextRow = currRow + 1;
+					var itemHeight = items[count].offsetHeight;
+
+					if((count % columns) === (columns - 1)) {
+						// Will go into next row
+						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight);
+					} else {
+						// Will go into same row
+						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight);
+					}
+				}
+
+				for(count = 1; count < rowOffsets.length; count++) {
+					rowOffsets[count] += rowOffsets[count - 1];
+				}
+
+				return rowOffsets;
+			},
+			_getItemPositions: function(elements) {
+				// Gets item offsets prior to animation
+				var boundingRects = [];
+
+				elements.forEach(function(element) {
+					boundingRects.push(element.getBoundingClientRect());
+				});
+
+				return boundingRects;
+			},
+			removeCourseFromTransitionList: function(courseID) {
+				var index = this._tilesInPinStateTransition.indexOf(courseID);
+
+				if (index !== -1) {
+					this._tilesInPinStateTransition.splice(index, 1);
+					return true;
+				}
+
+				return false;
+			},
+		});
+	</script>
+</dom-module>
diff --git a/d2l-course-tile.html b/d2l-course-tile.html
index bbf24f4..757b3d4 100644
--- a/d2l-course-tile.html
+++ b/d2l-course-tile.html
@@ -82,6 +82,10 @@
 				animateInsertion: {
 					type: Boolean
 				},
+				animateInsertionDelay: {
+					type: Number,
+					value: 0
+				},
 				_enrollmentEntity: {
 					type: Object,
 					observer: '_enrollmentEntityChanged'
@@ -121,9 +125,11 @@
 			},
 			attached: function() {
 				if (this.animateInsertion) {
-					var tileContainer = this.$$('.tile-container');
-					this.toggleClass('animate-insertion', true, tileContainer);
-					this.toggleClass('animate-insertion', true, this);
+					if(this.animateInsertionDelay === 0) {
+						var tileContainer = this.$$('.tile-container');
+						this.toggleClass('animate-insertion', true, tileContainer);
+						this.toggleClass('animate-insertion', true, this);
+					}
 				}
 			},
 			updatePreferencesOnResponse: function(response) {
-- 
2.7.2.windows.1


From b432bd0cdc30a6d2572678c1f09eb0cc8952469c Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Sat, 25 Jun 2016 22:18:50 -0500
Subject: [PATCH 04/18] Refactored existing course tile region stuff into new
 web component.. animation (or lack thereof) still not worked on =(

---
 d2l-all-courses.html                 | 48 ++++++++++++++----------------------
 d2l-course-management-behavior.html  |  2 +-
 d2l-course-tile-region-behavior.html |  4 +--
 d2l-course-tile-region.html          | 30 +++++++++++++---------
 d2l-my-courses.html                  | 19 ++++----------
 localize-behavior.html               |  1 +
 6 files changed, 46 insertions(+), 58 deletions(-)

diff --git a/d2l-all-courses.html b/d2l-all-courses.html
index c84aea1..07b9e49 100644
--- a/d2l-all-courses.html
+++ b/d2l-all-courses.html
@@ -1,12 +1,7 @@
 <link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-siren-parser/d2l-siren-parser.html">
-<link rel="import" href="../d2l-ajax/d2l-ajax.html">
-<link rel="import" href="d2l-alert.html">
 <link rel="import" href="d2l-all-courses-styles.html">
-<link rel="import" href="d2l-course-tile.html">
 <link rel="import" href="d2l-course-tile-region-behavior.html">
 <link rel="import" href="localize-behavior.html">
-<link rel="import" href="d2l-interaction-detection-behavior.html">
 <link rel="import" href="d2l-course-management-behavior.html">
 
 <dom-module id="d2l-all-courses">
@@ -15,31 +10,16 @@
 
 		<div class="dialog-content">
 			<h3 class="d2l-heading-3">{{localize('pinnedCourses')}}</h3>
-			<d2l-alert visible="{{!_hasPinnedCourses}}">
-				{{localize('noPinnedCoursesMessage')}}
-			</d2l-alert>
-			<div class="my-courses-container" role="region">
-				<template is="dom-repeat" items="[[pinnedCoursesEntities]]">
-					<d2l-course-tile
-						enrollment="[[item]]"
-						hover-enabled="[[_hoverInteractionEnabled]]"
-						touch-enabled="[[_touchInteractionEnabled]]"
-						animate-insertion="[[removeCourseFromTransitionList(item.properties.id)]]">
-					</d2l-course-tile>
-				</template>
-			</div>
+			<d2l-course-tile-region
+				course-entities="{{pinnedCoursesEntities}}"
+				alert-visible="{{!_hasPinnedCourses}}"
+				alert-message="{{localize('noPinnedCoursesMessage')}}">
+			</d2l-course-tile-region>
 
 			<h3 class="d2l-heading-3">{{localize('unpinnedCourses')}}</h3>
-			<div class="my-courses-container" role="region">
-				<template is="dom-repeat" items="[[unpinnedCoursesEntities]]">
-					<d2l-course-tile
-						enrollment="[[item]]"
-						hover-enabled="[[_hoverInteractionEnabled]]"
-						touch-enabled="[[_touchInteractionEnabled]]"
-						animate-insertion="[[removeCourseFromTransitionList(item.properties.id)]]">
-					</d2l-course-tile>
-				</template>
-			</div>
+			<d2l-course-tile-region
+				course-entities="{{unpinnedCoursesEntities}}">
+			</d2l-course-tile-region>
 		</div>
 	</template>
 
@@ -49,7 +29,6 @@
 			behaviors: [
 				Polymer.D2L.MyCourses.CourseTileRegionBehavior,
 				Polymer.D2L.MyCourses.LocalizeBehavior,
-				Polymer.D2L.MyCourses.InteractionDetectionBehavior,
 				Polymer.D2L.MyCourses.CourseManagementBehavior
 			],
 			focusableNodesOverride: function() {
@@ -72,6 +51,17 @@
 			fakePinnedCourseInsertion: function(columns) {
 				var container = Polymer.dom(this.root).querySelector('.my-courses-container');
 				this._animateTileSlide(container, true, 0, columns);
+			},
+			removeCourseFromTransitionList: function(courseID) {
+				return false;
+			},
+			_rescaleCourseTileRegions: function(forcedWidth) {
+				var itemCount = this.courseTileItemCount;
+				var courseTileRegions = Polymer.dom(this.root).querySelectorAll('d2l-course-tile-region');
+
+				Array.prototype.forEach.call(courseTileRegions, function(courseTileRegion) {
+					courseTileRegion._rescaleCourseTileRegions(forcedWidth, itemCount);
+				});
 			}
 		});
 	</script>
diff --git a/d2l-course-management-behavior.html b/d2l-course-management-behavior.html
index 0ed053e..ea8e777 100644
--- a/d2l-course-management-behavior.html
+++ b/d2l-course-management-behavior.html
@@ -41,7 +41,7 @@
 				},
 				usePendingLists: {
 					type: Boolean,
-					value: true
+					value: false
 				}
 			},
 			listeners: {
diff --git a/d2l-course-tile-region-behavior.html b/d2l-course-tile-region-behavior.html
index b529168..ca52a31 100644
--- a/d2l-course-tile-region-behavior.html
+++ b/d2l-course-tile-region-behavior.html
@@ -26,8 +26,8 @@
 			get courseTileItemCount() {
 				throw 'Must implement courseTileItemCount in behavior consumer';
 			},
-			_rescaleCourseTileRegions: function(forcedWidth) {
-				var itemCount = this.courseTileItemCount;
+			_rescaleCourseTileRegions: function(forcedWidth, itemCount) {
+				var _itemCount = itemCount || this.courseTileItemCount;
 
 				this._setupColumns(itemCount, forcedWidth);
 			},
diff --git a/d2l-course-tile-region.html b/d2l-course-tile-region.html
index 8659c97..cf8625f 100644
--- a/d2l-course-tile-region.html
+++ b/d2l-course-tile-region.html
@@ -1,28 +1,25 @@
 <link rel="import" href="../polymer/polymer.html">
-<link rel="import" href="../d2l-ajax/d2l-ajax.html">
-<link rel="import" href="../d2l-siren-parser/d2l-siren-parser.html">
-<link rel="import" href="../d2l-link/d2l-link.html">
 <link rel="import" href="d2l-my-courses-styles.html">
 <link rel="import" href="d2l-alert.html">
 <link rel="import" href="d2l-course-tile.html">
-<link rel="import" href="d2l-simple-overlay.html">
-<link rel="import" href="d2l-all-courses.html">
 <link rel="import" href="d2l-course-tile-region-behavior.html">
 <link rel="import" href="localize-behavior.html">
 <link rel="import" href="d2l-interaction-detection-behavior.html">
-<link rel="import" href="d2l-course-management-behavior.html">
 
-<dom-module id="d2l-my-courses">
+<dom-module id="d2l-course-tile-region">
 	<template>
 		<style include="d2l-my-courses-styles"></style>
+		<d2l-alert visible="[[alertVisible]]">
+			{{alertMessage}}
+		</d2l-alert>
+
 		<div class="my-courses-container">
-			<template is="dom-repeat" items="{{courseEntities}}">
+			<template is="dom-repeat" items="[[courseEntities]]">
 				<d2l-course-tile
-					enrollment="[[courseEntity]]"
+					enrollment="[[item]]"
 					hover-enabled="[[_hoverInteractionEnabled]]"
 					touch-enabled="[[_touchInteractionEnabled]]"
-					animate-insertion="[[removeCourseFromTransitionList(courseEntity.properties.id)]]"
-					animate-insertion-automatically=false>
+					animate-insertion="[[removeCourseFromTransitionList(item.properties.id)]]">
 				</d2l-course-tile>
 			</template>
 		</div>
@@ -38,9 +35,15 @@
 					value: function() {
 						return [];
 					}
-				}
+				},
 				_newCourseEntities: {
 					type: Array
+				},
+				alertVisible: {
+					type: Boolean
+				},
+				alertMessage: {
+					type: String
 				}
 			},
 			behaviors: [
@@ -240,6 +243,9 @@
 
 				return false;
 			},
+			get courseTileItemCount() {
+				return this.courseEntities.length;
+			}
 		});
 	</script>
 </dom-module>
diff --git a/d2l-my-courses.html b/d2l-my-courses.html
index 149b129..d237201 100644
--- a/d2l-my-courses.html
+++ b/d2l-my-courses.html
@@ -4,13 +4,11 @@
 <link rel="import" href="../d2l-link/d2l-link.html">
 <link rel="import" href="d2l-my-courses-styles.html">
 <link rel="import" href="d2l-alert.html">
-<link rel="import" href="d2l-course-tile.html">
 <link rel="import" href="d2l-simple-overlay.html">
 <link rel="import" href="d2l-all-courses.html">
-<link rel="import" href="d2l-course-tile-region-behavior.html">
 <link rel="import" href="localize-behavior.html">
-<link rel="import" href="d2l-interaction-detection-behavior.html">
 <link rel="import" href="d2l-course-management-behavior.html">
+<link rel="import" href="d2l-course-tile-region.html">
 
 <dom-module id="d2l-my-courses">
 	<template>
@@ -31,16 +29,9 @@
 				on-tap="refreshPage">{{localize('refresh')}}</a>
 		</d2l-alert>
 
-		<div class="my-courses-container">
-			<template is="dom-repeat" items="[[pinnedCoursesEntities]]">
-				<d2l-course-tile
-					enrollment="[[item]]"
-					hover-enabled="[[_hoverInteractionEnabled]]"
-					touch-enabled="[[_touchInteractionEnabled]]"
-					animate-insertion="[[removeCourseFromTransitionList(item.properties.id)]]">
-				</d2l-course-tile>
-			</template>
-		</div>
+		<d2l-course-tile-region
+			course-entities="{{pinnedCoursesEntities}}">
+		</d2l-course-tile-region>
 
 		<button class="all-courses-button"
 			hidden$="{{!_hasCourses}}"
@@ -105,7 +96,7 @@
 						this._alertMessage = this.localize('noCoursesMessage');
 					}
 
-					this._rescaleCourseTileRegions();
+					this.$$('d2l-course-tile-region')._rescaleCourseTileRegions();
 				}
 			},
 			refreshPage: function() {
diff --git a/localize-behavior.html b/localize-behavior.html
index c822cc2..676d186 100644
--- a/localize-behavior.html
+++ b/localize-behavior.html
@@ -37,6 +37,7 @@
 						'unpinActionResult': '{course} has been unpinned',
 						'noCoursesMessage': 'Your courses aren\'t quite ready. Please check back soon.',
 						'noPinnedCoursesMessage': 'You don\'t have any pinned courses. Pin your favorite courses to make them easier to find.',
+						'noUnpinnedCoursesMessage': 'Nothing to see here! All of your courses are pinned.',
 						'refresh': 'Refresh'
 					};
 
-- 
2.7.2.windows.1


From 222fbe44b1212d0bbe82aaefd7b46dbfb74dd3e4 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Sun, 26 Jun 2016 12:53:00 -0500
Subject: [PATCH 05/18] Rename to d2l-course-tile-grid

---
 d2l-all-courses.html        |  11 +-
 d2l-course-tile-grid.html   | 251 ++++++++++++++++++++++++++++++++++++++++++++
 d2l-course-tile-region.html |   4 +-
 d2l-my-courses.html         |   8 +-
 4 files changed, 263 insertions(+), 11 deletions(-)
 create mode 100644 d2l-course-tile-grid.html

diff --git a/d2l-all-courses.html b/d2l-all-courses.html
index 07b9e49..ba2e6ee 100644
--- a/d2l-all-courses.html
+++ b/d2l-all-courses.html
@@ -1,5 +1,6 @@
 <link rel="import" href="../polymer/polymer.html">
 <link rel="import" href="d2l-all-courses-styles.html">
+<link rel="import" href="d2l-course-tile-grid.html">
 <link rel="import" href="d2l-course-tile-region-behavior.html">
 <link rel="import" href="localize-behavior.html">
 <link rel="import" href="d2l-course-management-behavior.html">
@@ -10,16 +11,16 @@
 
 		<div class="dialog-content">
 			<h3 class="d2l-heading-3">{{localize('pinnedCourses')}}</h3>
-			<d2l-course-tile-region
+			<d2l-course-tile-grid
 				course-entities="{{pinnedCoursesEntities}}"
 				alert-visible="{{!_hasPinnedCourses}}"
 				alert-message="{{localize('noPinnedCoursesMessage')}}">
-			</d2l-course-tile-region>
+			</d2l-course-tile-grid>
 
 			<h3 class="d2l-heading-3">{{localize('unpinnedCourses')}}</h3>
-			<d2l-course-tile-region
+			<d2l-course-tile-grid
 				course-entities="{{unpinnedCoursesEntities}}">
-			</d2l-course-tile-region>
+			</d2l-course-tile-grid>
 		</div>
 	</template>
 
@@ -57,7 +58,7 @@
 			},
 			_rescaleCourseTileRegions: function(forcedWidth) {
 				var itemCount = this.courseTileItemCount;
-				var courseTileRegions = Polymer.dom(this.root).querySelectorAll('d2l-course-tile-region');
+				var courseTileRegions = Polymer.dom(this.root).querySelectorAll('d2l-course-tile-grid');
 
 				Array.prototype.forEach.call(courseTileRegions, function(courseTileRegion) {
 					courseTileRegion._rescaleCourseTileRegions(forcedWidth, itemCount);
diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
new file mode 100644
index 0000000..7dde624
--- /dev/null
+++ b/d2l-course-tile-grid.html
@@ -0,0 +1,251 @@
+<link rel="import" href="../polymer/polymer.html">
+<link rel="import" href="d2l-my-courses-styles.html">
+<link rel="import" href="d2l-alert.html">
+<link rel="import" href="d2l-course-tile.html">
+<link rel="import" href="d2l-course-tile-region-behavior.html">
+<link rel="import" href="localize-behavior.html">
+<link rel="import" href="d2l-interaction-detection-behavior.html">
+
+<dom-module id="d2l-course-tile-grid">
+	<template>
+		<style include="d2l-my-courses-styles"></style>
+		<d2l-alert visible="[[alertVisible]]">
+			{{alertMessage}}
+		</d2l-alert>
+
+		<div class="my-courses-container">
+			<template is="dom-repeat" items="[[courseEntities]]">
+				<d2l-course-tile
+					enrollment="[[item]]"
+					hover-enabled="[[_hoverInteractionEnabled]]"
+					touch-enabled="[[_touchInteractionEnabled]]"
+					animate-insertion="[[removeCourseFromTransitionList(item.properties.id)]]">
+				</d2l-course-tile>
+			</template>
+		</div>
+	</template>
+
+	<script>
+		Polymer({
+			is: 'd2l-course-tile-grid',
+			properties: {
+				courseEntities: {
+					type: Array,
+					notify: true,
+					value: function() {
+						return [];
+					}
+				},
+				_newCourseEntities: {
+					type: Array
+				},
+				alertVisible: {
+					type: Boolean
+				},
+				alertMessage: {
+					type: String
+				}
+			},
+			behaviors: [
+				Polymer.D2L.MyCourses.CourseTileRegionBehavior,
+				Polymer.D2L.MyCourses.InteractionDetectionBehavior
+			],
+			observers: [
+				'_onNewCourseEntitiesChanged(_newCourseEntities)'
+			],
+			created: function() {
+				this._tilesInPinStateTransition = [];
+			},
+			_onNewCourseEntitiesChanged: function(newCourseEntities) {
+				// For now, assume there will only be one entity being added at a time before being removed - might not affect implementation,
+				// but for simplicity, that's how's I'm writin' it.
+				var newCourse = newCourseEntities[0];
+
+				//*******************************
+				// Set up pre-animation stuff:
+				// 	*Save all of the existing tile/container positions, for intitial positioning
+				//  *Set all initial positions/sizes/whatever on elements
+				// 	*Set absolute positioning/etc on elements, so that new course tile won't break anything when we insert it
+				//   	* May have to have a "pre-animation" CSS class
+				//******************************
+				// Get all course tiles in container
+				var container = this.querySelector('.my-courses-container');
+				var courseTiles = container.querySelectorAll('d2l-course-tile');
+				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
+				var parentRect = container.getBoundingClientRect();
+				// We need to know course tile properties prior to any animation taking place
+  				var courseTileRects = this._getItemPositions(courseTiles);
+				var containerWidth = container.offsetWidth;
+				var containerHeight = container.offsetHeight;
+
+				// Set initial values for container
+				this.customStyle['--container-width'] = containerWidth + 'px';
+				this.customStyle['--container-height'] = containerHeight + 'px';
+
+				// Set intial values for course tiles
+				for(var i = 0; i < courseTiles.length; i++) {
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+
+					courseTile.customStyle['--col'] = Math.floor(courseTileRect.left - parentRect.left); + 'px';
+					courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
+					courseTile.updateStyles();
+				};
+
+				//*******************************
+				// Add new course tile:
+				// 	*Ensure course tile info is set in "in-transition" list(s), including delay
+				// 	*Prepend to course entities list - delay until now as it affects the DOM
+				//*******************************
+				this._tilesInPinStateTransition.push(newCourse.properties.id);
+				this._nextCourseInsertionDelaySecs = 1.0;
+				this.unshift('coursesEntities', newCourse);
+
+				// Calculate new row/container heights, now that we have the height of the new tile
+				// @NOTE: Do we have to listen for a dom-change event first, to make sure the tile's been inserted?
+				// Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
+				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
+				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
+				courseTiles = container.querySelectorAll('d2l-course-tile');
+				var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
+
+				// Set new positions for course tiles
+				for(var i = 0; i < courseTiles.length; i++) {
+					var leftMarginPct = [
+						[0], //1 column
+						[0, .01666], //2 columns
+						[0, .0112, .0224], //3 columns
+						[0, .009, .018, .027] //4 columns
+					];
+
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+					var containerWidth = container.offsetWidth;
+					var nextCol = (i + 1) % columns;
+					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
+					var newCol = courseTile.offsetWidth * nextCol;
+
+					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+
+					if((i % columns) !== 0) {
+						currCol -= 6;
+					}
+
+					courseTile.customStyle['--new-col'] = newCol + 'px';
+					courseTile.customStyle['--new-row'] = newRow + 'px';
+					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+					courseTile.updateStyles();
+				};
+
+				// Set new container height
+				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
+				this.toggleClass('animate', true, container);
+
+				// Let loose the dogs of war (that is, start animation)
+				this.toggle('animate', true, this.$$('.my-courses-container'));
+			},
+			_tilesInPinStateTransition: null,
+			_nextCourseInsertionDelaySecs: 0,
+			_animateTileSlide: function(container, isInsertion, position, columns) {
+				// Resize container
+				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
+				this.toggleClass('animate', true, container);
+
+				this.updateStyles();
+
+				setTimeout(function(container) {
+					this.toggleClass('animate', false, container);
+				}.bind(this, container), 4000);
+
+				for(var i = 0; i < courseTiles.length; i++) {
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+					var containerWidth = container.offsetWidth;
+					var currCol = Math.floor(courseTileRect.left - parentRect.left);
+					var currRow = (courseTileRect.top - parentRect.top);
+					var nextCol = (i + 1) % columns;
+					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
+					var newCol = courseTile.offsetWidth * nextCol;
+
+					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+
+					if((i % columns) !== 0) {
+						currCol -= 6;
+					}
+
+					currCol = currCol + 'px';
+					currRow = currRow + 'px';
+					newCol += 'px';
+					newRow += 'px';
+
+					courseTile.customStyle['--col'] = currCol;
+					courseTile.customStyle['--row'] = currRow;
+					courseTile.customStyle['--new-col'] = newCol;
+					courseTile.customStyle['--new-row'] = newRow;
+					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+					courseTile.updateStyles();
+
+					courseTile.classList.add('animate');
+
+					setTimeout(function() {
+						this.classList.remove('animate');
+					}.bind(courseTile), 2000);
+				};
+
+				setTimeout(function() {
+					this.toggleClass('animate', true, container);
+				}.bind(this), 2000);
+
+				this.updateStyles();
+
+			},
+			_getNewRowOffsets: function(container, items, columns) {
+				var numRows = Math.floor(items.length/columns) + 1;
+				var rowOffsets = Array.apply(null, Array(numRows)).map(function() {return 0;});
+
+				for(var count = 0; count <= items.length - 1; count++)  {
+					var currRow = Math.floor(count / columns);
+					var nextRow = currRow + 1;
+					var itemHeight = items[count].offsetHeight;
+
+					if((count % columns) === (columns - 1)) {
+						// Will go into next row
+						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight);
+					} else {
+						// Will go into same row
+						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight);
+					}
+				}
+
+				for(count = 1; count < rowOffsets.length; count++) {
+					rowOffsets[count] += rowOffsets[count - 1];
+				}
+
+				return rowOffsets;
+			},
+			_getItemPositions: function(elements) {
+				// Gets item offsets prior to animation
+				var boundingRects = [];
+
+				elements.forEach(function(element) {
+					boundingRects.push(element.getBoundingClientRect());
+				});
+
+				return boundingRects;
+			},
+			removeCourseFromTransitionList: function(courseID) {
+				var index = this._tilesInPinStateTransition.indexOf(courseID);
+
+				if (index !== -1) {
+					this._tilesInPinStateTransition.splice(index, 1);
+					return true;
+				}
+
+				return false;
+			},
+			get courseTileItemCount() {
+				return this.courseEntities.length;
+			}
+		});
+	</script>
+</dom-module>
diff --git a/d2l-course-tile-region.html b/d2l-course-tile-region.html
index cf8625f..7dde624 100644
--- a/d2l-course-tile-region.html
+++ b/d2l-course-tile-region.html
@@ -6,7 +6,7 @@
 <link rel="import" href="localize-behavior.html">
 <link rel="import" href="d2l-interaction-detection-behavior.html">
 
-<dom-module id="d2l-course-tile-region">
+<dom-module id="d2l-course-tile-grid">
 	<template>
 		<style include="d2l-my-courses-styles"></style>
 		<d2l-alert visible="[[alertVisible]]">
@@ -27,7 +27,7 @@
 
 	<script>
 		Polymer({
-			is: 'd2l-course-tile-region',
+			is: 'd2l-course-tile-grid',
 			properties: {
 				courseEntities: {
 					type: Array,
diff --git a/d2l-my-courses.html b/d2l-my-courses.html
index d237201..2e3fbbb 100644
--- a/d2l-my-courses.html
+++ b/d2l-my-courses.html
@@ -8,7 +8,7 @@
 <link rel="import" href="d2l-all-courses.html">
 <link rel="import" href="localize-behavior.html">
 <link rel="import" href="d2l-course-management-behavior.html">
-<link rel="import" href="d2l-course-tile-region.html">
+<link rel="import" href="d2l-course-tile-grid.html">
 
 <dom-module id="d2l-my-courses">
 	<template>
@@ -29,9 +29,9 @@
 				on-tap="refreshPage">{{localize('refresh')}}</a>
 		</d2l-alert>
 
-		<d2l-course-tile-region
+		<d2l-course-tile-grid
 			course-entities="{{pinnedCoursesEntities}}">
-		</d2l-course-tile-region>
+		</d2l-course-tile-grid>
 
 		<button class="all-courses-button"
 			hidden$="{{!_hasCourses}}"
@@ -96,7 +96,7 @@
 						this._alertMessage = this.localize('noCoursesMessage');
 					}
 
-					this.$$('d2l-course-tile-region')._rescaleCourseTileRegions();
+					this.$$('d2l-course-tile-grid')._rescaleCourseTileRegions();
 				}
 			},
 			refreshPage: function() {
-- 
2.7.2.windows.1


From cc38d91a8ca8ee653fc1efb3f60612e89c567317 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Sun, 26 Jun 2016 13:20:08 -0500
Subject: [PATCH 06/18] Using the pending queue.

---
 d2l-all-courses.html                |   4 +-
 d2l-course-management-behavior.html |  10 +-
 d2l-course-tile-grid.html           | 178 +++++++++++++++++++-----------------
 3 files changed, 100 insertions(+), 92 deletions(-)

diff --git a/d2l-all-courses.html b/d2l-all-courses.html
index ba2e6ee..2002569 100644
--- a/d2l-all-courses.html
+++ b/d2l-all-courses.html
@@ -13,13 +13,15 @@
 			<h3 class="d2l-heading-3">{{localize('pinnedCourses')}}</h3>
 			<d2l-course-tile-grid
 				course-entities="{{pinnedCoursesEntities}}"
+				course-entities-queue="{{pinnedCoursesEntitiesQueue}}"
 				alert-visible="{{!_hasPinnedCourses}}"
 				alert-message="{{localize('noPinnedCoursesMessage')}}">
 			</d2l-course-tile-grid>
 
 			<h3 class="d2l-heading-3">{{localize('unpinnedCourses')}}</h3>
 			<d2l-course-tile-grid
-				course-entities="{{unpinnedCoursesEntities}}">
+				course-entities="{{unpinnedCoursesEntities}}"
+				course-entities-queue="{{unpinnedCoursesEntitiesQueue}}">
 			</d2l-course-tile-grid>
 		</div>
 	</template>
diff --git a/d2l-course-management-behavior.html b/d2l-course-management-behavior.html
index ea8e777..72fcae3 100644
--- a/d2l-course-management-behavior.html
+++ b/d2l-course-management-behavior.html
@@ -21,12 +21,12 @@
 					value: [],
 					notify: true
 				},
-				pinnedCoursesEntitiesPending: {
+				pinnedCoursesEntitiesQueue: {
 					type: Array,
 					value: [],
 					notify: true
 				},
-				unpinnedCoursesEntitiesPending: {
+				unpinnedCoursesEntitiesQueue: {
 					type: Array,
 					value: [],
 					notify: true
@@ -41,7 +41,7 @@
 				},
 				usePendingLists: {
 					type: Boolean,
-					value: false
+					value: true
 				}
 			},
 			listeners: {
@@ -107,7 +107,7 @@
 
 						// If enabled, add to list of "to be added" pinned entities, and let consumer move to pinned list when desired
 						if(this.usePendingLists) {
-							this.push('pinnedCoursesEntitiesPending', foundCourse);
+							this.push('pinnedCoursesEntitiesQueue', foundCourse);
 						} else {
 							this._tilesInPinStateTransition.push(course.properties.id);
 							this.unshift('pinnedCoursesEntities', foundCourse);
@@ -128,7 +128,7 @@
 
 						// If enabled, add to list of "to be added" unpinned entities, and let consumer move to unpinned list when desired
 						if(this.usePendingLists) {
-							this.push('unpinnedCoursesEntitiesPending', foundCourse);
+							this.push('unpinnedCoursesEntitiesQueue', foundCourse);
 						} else {
 							this._tilesInPinStateTransition.push(course.properties.id);
 							this.unshift('unpinnedCoursesEntities', foundCourse);
diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 7dde624..5dfed95 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -36,8 +36,12 @@
 						return [];
 					}
 				},
-				_newCourseEntities: {
-					type: Array
+				courseEntitiesQueue: {
+					type: Array,
+					notify: true,
+					value: function() {
+						return [];
+					}
 				},
 				alertVisible: {
 					type: Boolean
@@ -51,98 +55,100 @@
 				Polymer.D2L.MyCourses.InteractionDetectionBehavior
 			],
 			observers: [
-				'_onNewCourseEntitiesChanged(_newCourseEntities)'
+				'_onCourseEntitiesQueueChanged(courseEntitiesQueue.*)'
 			],
 			created: function() {
 				this._tilesInPinStateTransition = [];
 			},
-			_onNewCourseEntitiesChanged: function(newCourseEntities) {
+			_onCourseEntitiesQueueChanged: function(newCourseEntities) {
 				// For now, assume there will only be one entity being added at a time before being removed - might not affect implementation,
 				// but for simplicity, that's how's I'm writin' it.
-				var newCourse = newCourseEntities[0];
-
-				//*******************************
-				// Set up pre-animation stuff:
-				// 	*Save all of the existing tile/container positions, for intitial positioning
-				//  *Set all initial positions/sizes/whatever on elements
-				// 	*Set absolute positioning/etc on elements, so that new course tile won't break anything when we insert it
-				//   	* May have to have a "pre-animation" CSS class
-				//******************************
-				// Get all course tiles in container
-				var container = this.querySelector('.my-courses-container');
-				var courseTiles = container.querySelectorAll('d2l-course-tile');
-				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
-				var parentRect = container.getBoundingClientRect();
-				// We need to know course tile properties prior to any animation taking place
-  				var courseTileRects = this._getItemPositions(courseTiles);
-				var containerWidth = container.offsetWidth;
-				var containerHeight = container.offsetHeight;
-
-				// Set initial values for container
-				this.customStyle['--container-width'] = containerWidth + 'px';
-				this.customStyle['--container-height'] = containerHeight + 'px';
-
-				// Set intial values for course tiles
-				for(var i = 0; i < courseTiles.length; i++) {
-					var courseTile = courseTiles[i];
-					var courseTileRect = courseTileRects[i];
-
-					courseTile.customStyle['--col'] = Math.floor(courseTileRect.left - parentRect.left); + 'px';
-					courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
-					courseTile.updateStyles();
-				};
-
-				//*******************************
-				// Add new course tile:
-				// 	*Ensure course tile info is set in "in-transition" list(s), including delay
-				// 	*Prepend to course entities list - delay until now as it affects the DOM
-				//*******************************
-				this._tilesInPinStateTransition.push(newCourse.properties.id);
-				this._nextCourseInsertionDelaySecs = 1.0;
-				this.unshift('coursesEntities', newCourse);
-
-				// Calculate new row/container heights, now that we have the height of the new tile
-				// @NOTE: Do we have to listen for a dom-change event first, to make sure the tile's been inserted?
-				// Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
-				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
-				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
-				courseTiles = container.querySelectorAll('d2l-course-tile');
-				var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
-
-				// Set new positions for course tiles
-				for(var i = 0; i < courseTiles.length; i++) {
-					var leftMarginPct = [
-						[0], //1 column
-						[0, .01666], //2 columns
-						[0, .0112, .0224], //3 columns
-						[0, .009, .018, .027] //4 columns
-					];
-
-					var courseTile = courseTiles[i];
-					var courseTileRect = courseTileRects[i];
+				var newCourse = newCourseEntities.base[0];
+
+				if(newCourse) {
+					//*******************************
+					// Set up pre-animation stuff:
+					// 	*Save all of the existing tile/container positions, for intitial positioning
+					//  *Set all initial positions/sizes/whatever on elements
+					// 	*Set absolute positioning/etc on elements, so that new course tile won't break anything when we insert it
+					//   	* May have to have a "pre-animation" CSS class
+					//******************************
+					// Get all course tiles in container
+					var container = this.$$('.my-courses-container');
+					var courseTiles = container.querySelectorAll('d2l-course-tile');
+					// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
+					var parentRect = container.getBoundingClientRect();
+					// We need to know course tile properties prior to any animation taking place
+					var courseTileRects = this._getItemPositions(courseTiles);
 					var containerWidth = container.offsetWidth;
-					var nextCol = (i + 1) % columns;
-					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
-					var newCol = courseTile.offsetWidth * nextCol;
-
-					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
-
-					if((i % columns) !== 0) {
-						currCol -= 6;
-					}
-
-					courseTile.customStyle['--new-col'] = newCol + 'px';
-					courseTile.customStyle['--new-row'] = newRow + 'px';
-					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
-					courseTile.updateStyles();
-				};
-
-				// Set new container height
-				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
-				this.toggleClass('animate', true, container);
+					var containerHeight = container.offsetHeight;
+
+					// Set initial values for container
+					this.customStyle['--container-width'] = containerWidth + 'px';
+					this.customStyle['--container-height'] = containerHeight + 'px';
+
+					// Set intial values for course tiles
+					for(var i = 0; i < courseTiles.length; i++) {
+						var courseTile = courseTiles[i];
+						var courseTileRect = courseTileRects[i];
+
+						courseTile.customStyle['--col'] = Math.floor(courseTileRect.left - parentRect.left) + 'px';
+						courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
+						courseTile.updateStyles();
+					};
+
+					//*******************************
+					// Add new course tile:
+					// 	*Ensure course tile info is set in "in-transition" list(s), including delay
+					// 	*Prepend to course entities list - delay until now as it affects the DOM
+					//*******************************
+					this._tilesInPinStateTransition.push(newCourse.properties.id);
+					this._nextCourseInsertionDelaySecs = 1.0;
+					this.unshift('courseEntities', newCourse);
+
+					// Calculate new row/container heights, now that we have the height of the new tile
+					// @NOTE: Do we have to listen for a dom-change event first, to make sure the tile's been inserted?
+					// Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
+					// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
+					// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
+					courseTiles = container.querySelectorAll('d2l-course-tile');
+					var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
+
+					// Set new positions for course tiles
+					for(var i = 0; i < courseTiles.length; i++) {
+						var leftMarginPct = [
+							[0], //1 column
+							[0, .01666], //2 columns
+							[0, .0112, .0224], //3 columns
+							[0, .009, .018, .027] //4 columns
+						];
+
+						var courseTile = courseTiles[i];
+						var courseTileRect = courseTileRects[i];
+						var containerWidth = container.offsetWidth;
+						var nextCol = (i + 1) % columns;
+						var newRow = rowOffsets[Math.floor((i + 1) / columns)];
+						var newCol = courseTile.offsetWidth * nextCol;
+
+						newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+
+						if((i % columns) !== 0) {
+							currCol -= 6;
+						}
+
+						courseTile.customStyle['--new-col'] = newCol + 'px';
+						courseTile.customStyle['--new-row'] = newRow + 'px';
+						courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+						courseTile.updateStyles();
+					};
+
+					// Set new container height
+					this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
+					this.toggleClass('animate', true, container);
 
-				// Let loose the dogs of war (that is, start animation)
-				this.toggle('animate', true, this.$$('.my-courses-container'));
+					// Let loose the dogs of war (that is, start animation)
+					this.toggle('animate', true, this.$$('.my-courses-container'));
+				}
 			},
 			_tilesInPinStateTransition: null,
 			_nextCourseInsertionDelaySecs: 0,
-- 
2.7.2.windows.1


From ffcc77f6429a0ea437a07fca485d68f517faa94c Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Sun, 26 Jun 2016 15:00:50 -0500
Subject: [PATCH 07/18] Kind of working, but one-shot.

---
 d2l-course-tile-grid.html | 88 +++++++++++++++++++++++++----------------------
 d2l-course-tile.html      |  4 +--
 2 files changed, 48 insertions(+), 44 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 5dfed95..6cccc0c 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -106,48 +106,52 @@
 					this._nextCourseInsertionDelaySecs = 1.0;
 					this.unshift('courseEntities', newCourse);
 
-					// Calculate new row/container heights, now that we have the height of the new tile
-					// @NOTE: Do we have to listen for a dom-change event first, to make sure the tile's been inserted?
-					// Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
-					// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
-					// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
-					courseTiles = container.querySelectorAll('d2l-course-tile');
-					var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
-
-					// Set new positions for course tiles
-					for(var i = 0; i < courseTiles.length; i++) {
-						var leftMarginPct = [
-							[0], //1 column
-							[0, .01666], //2 columns
-							[0, .0112, .0224], //3 columns
-							[0, .009, .018, .027] //4 columns
-						];
-
-						var courseTile = courseTiles[i];
-						var courseTileRect = courseTileRects[i];
-						var containerWidth = container.offsetWidth;
-						var nextCol = (i + 1) % columns;
-						var newRow = rowOffsets[Math.floor((i + 1) / columns)];
-						var newCol = courseTile.offsetWidth * nextCol;
-
-						newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
-
-						if((i % columns) !== 0) {
-							currCol -= 6;
-						}
-
-						courseTile.customStyle['--new-col'] = newCol + 'px';
-						courseTile.customStyle['--new-row'] = newRow + 'px';
-						courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
-						courseTile.updateStyles();
-					};
-
-					// Set new container height
-					this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
-					this.toggleClass('animate', true, container);
-
-					// Let loose the dogs of war (that is, start animation)
-					this.toggle('animate', true, this.$$('.my-courses-container'));
+					var onNewCourseAdded = function(container, columns) {
+						// Calculate new row/container heights, now that we have the height of the new tile
+						// @NOTE: Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
+						// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
+						// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
+						var courseTiles = container.querySelectorAll('d2l-course-tile');
+						var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
+
+						// Set new positions for course tiles (but not new tile!)
+						for(var i = 1; i < courseTiles.length; i++) {
+							var leftMarginPct = [
+								[0], //1 column
+								[0, .01666], //2 columns
+								[0, .0112, .0224], //3 columns
+								[0, .009, .018, .027] //4 columns
+							];
+
+							var courseTile = courseTiles[i];
+							var courseTileRect = courseTileRects[i];
+							var containerWidth = container.offsetWidth;
+							var nextCol = i % columns;
+							var newRow = rowOffsets[Math.floor(i / columns)];
+							var newCol = courseTile.offsetWidth * nextCol;
+
+							newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+
+							courseTile.customStyle['--new-col'] = newCol + 'px';
+							courseTile.customStyle['--new-row'] = newRow + 'px';
+							courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+							courseTile.updateStyles();
+							courseTile.classList.add('animate');
+						};
+
+						// Set new container height
+						this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
+						this.updateStyles();
+
+						// Let loose the dogs of war (that is, start animation)
+						this.toggleClass('animate', true, container);
+					}.bind(this, container, 3);
+
+					// Get container template to add event listener to
+					var gridTemplate = container.querySelector('template');
+					gridTemplate.addEventListener('dom-change', onNewCourseAdded);
+
+					this.splice('courseEntitiesQueue', 0, 1);
 				}
 			},
 			_tilesInPinStateTransition: null,
diff --git a/d2l-course-tile.html b/d2l-course-tile.html
index 757b3d4..f5fa73d 100644
--- a/d2l-course-tile.html
+++ b/d2l-course-tile.html
@@ -278,8 +278,8 @@
 					this.fire('tile-remove-complete', {course: this._enrollmentEntity, pinned: this.pendingPinAction});
 				} else if (e.animationName.includes('scale-and-fade-in')) {
 					var tileContainer = this.$$('.tile-container');
-					this.toggleClass('animate-insertion', false, tileContainer);
-					this.toggleClass('animate-insertion', false, this);
+					//this.toggleClass('animate-insertion', false, tileContainer);
+					//this.toggleClass('animate-insertion', false, this);
 				}
 			},
 			pendingPinAction: false,
-- 
2.7.2.windows.1


From 1789469e40d89739cda88b11999dd17369335de2 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 10:57:43 -0500
Subject: [PATCH 08/18] Fixed initial offset in tile animation. Now have to fix
 trailing offset due to reintroduction of margins.

---
 d2l-course-tile-grid.html          | 35 ++++++++++++++++++++++++++---------
 d2l-course-tile-region-styles.html |  9 ++++++++-
 d2l-course-tile-styles.html        |  3 +--
 3 files changed, 35 insertions(+), 12 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 6cccc0c..c1da91a 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -5,10 +5,12 @@
 <link rel="import" href="d2l-course-tile-region-behavior.html">
 <link rel="import" href="localize-behavior.html">
 <link rel="import" href="d2l-interaction-detection-behavior.html">
+<link rel="import" href="d2l-course-tile-region-styles.html">
 
 <dom-module id="d2l-course-tile-grid">
 	<template>
 		<style include="d2l-my-courses-styles"></style>
+		<style include="d2l-course-tile-region-styles"></style>
 		<d2l-alert visible="[[alertVisible]]">
 			{{alertMessage}}
 		</d2l-alert>
@@ -92,7 +94,8 @@
 						var courseTile = courseTiles[i];
 						var courseTileRect = courseTileRects[i];
 
-						courseTile.customStyle['--col'] = Math.floor(courseTileRect.left - parentRect.left) + 'px';
+						var col = (courseTileRect.left - parentRect.left) + 'px';
+						courseTile.customStyle['--col'] = col;
 						courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
 						courseTile.updateStyles();
 					};
@@ -117,10 +120,16 @@
 						// Set new positions for course tiles (but not new tile!)
 						for(var i = 1; i < courseTiles.length; i++) {
 							var leftMarginPct = [
+								/*
 								[0], //1 column
 								[0, .01666], //2 columns
 								[0, .0112, .0224], //3 columns
 								[0, .009, .018, .027] //4 columns
+								*/
+								[0], //1 column
+								[0, .0833], //2 columns
+								[0, .0056, .0112], //3 columns
+								[0, .0045, .009, .018] //4 columns
 							];
 
 							var courseTile = courseTiles[i];
@@ -130,21 +139,29 @@
 							var newRow = rowOffsets[Math.floor(i / columns)];
 							var newCol = courseTile.offsetWidth * nextCol;
 
-							newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+							newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
 
 							courseTile.customStyle['--new-col'] = newCol + 'px';
 							courseTile.customStyle['--new-row'] = newRow + 'px';
 							courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
 							courseTile.updateStyles();
-							courseTile.classList.add('animate');
 						};
 
-						// Set new container height
-						this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
-						this.updateStyles();
+						var newContainerHeight = 0;
+
+						if(courseTiles.length % columns === 1) {
+							// If we've added a new row, set new container height
+							this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
+							this.updateStyles();
+						}
 
 						// Let loose the dogs of war (that is, start animation)
 						this.toggleClass('animate', true, container);
+
+						setTimeout(function(courseTiles) {
+							this.toggleClass('animate-insertion', false, courseTiles[0]);
+							this.toggleClass('animate', false, container);
+						}.bind(this, courseTiles), 3000);
 					}.bind(this, container, 3);
 
 					// Get container template to add event listener to
@@ -218,12 +235,12 @@
 					var nextRow = currRow + 1;
 					var itemHeight = items[count].offsetHeight;
 
-					if((count % columns) === (columns - 1)) {
+					if((count % columns) === 0) {
 						// Will go into next row
-						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight);
+						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight) + 12;
 					} else {
 						// Will go into same row
-						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight);
+						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight) + 12;
 					}
 				}
 
diff --git a/d2l-course-tile-region-styles.html b/d2l-course-tile-region-styles.html
index f28a20f..2806f2b 100644
--- a/d2l-course-tile-region-styles.html
+++ b/d2l-course-tile-region-styles.html
@@ -6,12 +6,14 @@
 		}
 
 		.my-courses-container {
+			position: relative;
 			width: calc(100% + 10px); /* 10px to account for negative margin, below */
 			display: flex;
 			flex-wrap: wrap;
 			flex-direction: row;
 			align-items: flex-start;
-			margin-left: -10px;	/* To offset 10px left padding on tile containers, where tile image left edge must align with headers */
+			//margin-left: -10px;	/* To offset 10px left padding on tile containers, where tile image left edge must align with headers */
+			left: -10px;
 		}
 
 		.my-courses-container.animate {
@@ -71,6 +73,11 @@
 		.columns-4 d2l-course-tile:nth-of-type(4n+1) {
 			margin-left: 0;
 		}
+
+		.my-courses-container.animate d2l-course-tile {
+			margin-right: 0;
+			margin-left: 0;
+		}
 		</style>
 	</template>
 </dom-module>
diff --git a/d2l-course-tile-styles.html b/d2l-course-tile-styles.html
index 742bed1..03824c0 100644
--- a/d2l-course-tile-styles.html
+++ b/d2l-course-tile-styles.html
@@ -191,8 +191,7 @@
 			}
 		}
 
-
-		:host(.animate) {
+		:host-context(.animate) {
 			animation-name: slideover;
 			animation-duration: 1.0s;
 			animation-delay: var(--delay);
-- 
2.7.2.windows.1


From 29f748a104548f4a9ec5bceefbb019932e12b470 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 11:13:04 -0500
Subject: [PATCH 09/18] Hover working again on newly-inserted course tiles, but
 many things still garbage.

---
 d2l-course-tile-grid.html   | 8 ++++----
 d2l-course-tile-styles.html | 2 +-
 d2l-course-tile.html        | 4 ++--
 3 files changed, 7 insertions(+), 7 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index c1da91a..45fe90a 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -120,16 +120,16 @@
 						// Set new positions for course tiles (but not new tile!)
 						for(var i = 1; i < courseTiles.length; i++) {
 							var leftMarginPct = [
-								/*
 								[0], //1 column
 								[0, .01666], //2 columns
-								[0, .0112, .0224], //3 columns
+								[0, .011, .0225], //3 columns
 								[0, .009, .018, .027] //4 columns
-								*/
+								/*
 								[0], //1 column
 								[0, .0833], //2 columns
 								[0, .0056, .0112], //3 columns
 								[0, .0045, .009, .018] //4 columns
+								*/
 							];
 
 							var courseTile = courseTiles[i];
@@ -143,7 +143,7 @@
 
 							courseTile.customStyle['--new-col'] = newCol + 'px';
 							courseTile.customStyle['--new-row'] = newRow + 'px';
-							courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+							courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.1) + 's';
 							courseTile.updateStyles();
 						};
 
diff --git a/d2l-course-tile-styles.html b/d2l-course-tile-styles.html
index 03824c0..3c68ef2 100644
--- a/d2l-course-tile-styles.html
+++ b/d2l-course-tile-styles.html
@@ -193,7 +193,7 @@
 
 		:host-context(.animate) {
 			animation-name: slideover;
-			animation-duration: 1.0s;
+			animation-duration: 0.5s;
 			animation-delay: var(--delay);
 			animation-fill-mode: both;
 			position: absolute;
diff --git a/d2l-course-tile.html b/d2l-course-tile.html
index f5fa73d..757b3d4 100644
--- a/d2l-course-tile.html
+++ b/d2l-course-tile.html
@@ -278,8 +278,8 @@
 					this.fire('tile-remove-complete', {course: this._enrollmentEntity, pinned: this.pendingPinAction});
 				} else if (e.animationName.includes('scale-and-fade-in')) {
 					var tileContainer = this.$$('.tile-container');
-					//this.toggleClass('animate-insertion', false, tileContainer);
-					//this.toggleClass('animate-insertion', false, this);
+					this.toggleClass('animate-insertion', false, tileContainer);
+					this.toggleClass('animate-insertion', false, this);
 				}
 			},
 			pendingPinAction: false,
-- 
2.7.2.windows.1


From 9fe5fe19cdef8c8c906dd6293077927d51bdce8f Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 11:29:13 -0500
Subject: [PATCH 10/18] Fixed container width problem on pinning/unpinng and
 then changing window size

---
 d2l-all-courses-styles.html | 3 ---
 d2l-course-tile-grid.html   | 1 +
 d2l-course-tile-region.html | 3 ++-
 d2l-my-courses-styles.html  | 2 --
 4 files changed, 3 insertions(+), 6 deletions(-)

diff --git a/d2l-all-courses-styles.html b/d2l-all-courses-styles.html
index c11bc66..863bb38 100644
--- a/d2l-all-courses-styles.html
+++ b/d2l-all-courses-styles.html
@@ -1,8 +1,5 @@
-<link rel="import" href="d2l-course-tile-region-styles.html">
-
 <dom-module id="d2l-all-courses-styles">
 	<template>
-		<style include="d2l-course-tile-region-styles"></style>
 		<style>
 		:host {
 			display: block;
diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 45fe90a..113a4e5 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -88,6 +88,7 @@
 					// Set initial values for container
 					this.customStyle['--container-width'] = containerWidth + 'px';
 					this.customStyle['--container-height'] = containerHeight + 'px';
+					this.updateStyles();
 
 					// Set intial values for course tiles
 					for(var i = 0; i < courseTiles.length; i++) {
diff --git a/d2l-course-tile-region.html b/d2l-course-tile-region.html
index 7dde624..03435fc 100644
--- a/d2l-course-tile-region.html
+++ b/d2l-course-tile-region.html
@@ -79,8 +79,9 @@
 				var containerHeight = container.offsetHeight;
 
 				// Set initial values for container
-				this.customStyle['--container-width'] = containerWidth + 'px';
+				this.customStyle['--container-width'] = '500px';
 				this.customStyle['--container-height'] = containerHeight + 'px';
+				this.updateStyles();
 
 				// Set intial values for course tiles
 				for(var i = 0; i < courseTiles.length; i++) {
diff --git a/d2l-my-courses-styles.html b/d2l-my-courses-styles.html
index 5679745..252abc6 100644
--- a/d2l-my-courses-styles.html
+++ b/d2l-my-courses-styles.html
@@ -1,12 +1,10 @@
 <link rel="import" href="../d2l-colors/d2l-colors.html">
 <link rel="import" href="../d2l-typography/d2l-typography-shared-styles.html">
-<link rel="import" href="d2l-course-tile-region-styles.html">
 
 <dom-module id="d2l-my-courses-styles">
 	<template>
 		<style include="d2l-colors"></style>
 		<style include="d2l-typography-shared-styles"></style>
-		<style include="d2l-course-tile-region-styles"></style>
 		<style>
 		:host {
 			display: block;
-- 
2.7.2.windows.1


From 6a6f9b7985c56b7f5ba7a5bf58f05f3e71ecdfd3 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 12:44:07 -0500
Subject: [PATCH 11/18] Tile insertion will now stay in transparent state until
 insertion; will now remove all animation classes on insertion complete, as
 that's the last animation.

---
 d2l-course-tile-grid.html   | 29 +++++++++++++++--------------
 d2l-course-tile-styles.html | 18 ++++++++++++++++++
 d2l-course-tile.html        | 18 ++++++++++++------
 3 files changed, 45 insertions(+), 20 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 113a4e5..5568288 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -56,6 +56,9 @@
 				Polymer.D2L.MyCourses.CourseTileRegionBehavior,
 				Polymer.D2L.MyCourses.InteractionDetectionBehavior
 			],
+			listeners: {
+				'tile-insert-complete': '_onTileInsertionComplete'
+			},
 			observers: [
 				'_onCourseEntitiesQueueChanged(courseEntitiesQueue.*)'
 			],
@@ -94,8 +97,8 @@
 					for(var i = 0; i < courseTiles.length; i++) {
 						var courseTile = courseTiles[i];
 						var courseTileRect = courseTileRects[i];
-
 						var col = (courseTileRect.left - parentRect.left) + 'px';
+
 						courseTile.customStyle['--col'] = col;
 						courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
 						courseTile.updateStyles();
@@ -117,6 +120,7 @@
 						// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
 						var courseTiles = container.querySelectorAll('d2l-course-tile');
 						var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
+						var totalSlideDelay = 0;
 
 						// Set new positions for course tiles (but not new tile!)
 						for(var i = 1; i < courseTiles.length; i++) {
@@ -125,12 +129,6 @@
 								[0, .01666], //2 columns
 								[0, .011, .0225], //3 columns
 								[0, .009, .018, .027] //4 columns
-								/*
-								[0], //1 column
-								[0, .0833], //2 columns
-								[0, .0056, .0112], //3 columns
-								[0, .0045, .009, .018] //4 columns
-								*/
 							];
 
 							var courseTile = courseTiles[i];
@@ -141,6 +139,7 @@
 							var newCol = courseTile.offsetWidth * nextCol;
 
 							newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
+							totalSlideDelay += 0.1;
 
 							courseTile.customStyle['--new-col'] = newCol + 'px';
 							courseTile.customStyle['--new-row'] = newRow + 'px';
@@ -148,6 +147,9 @@
 							courseTile.updateStyles();
 						};
 
+						courseTiles[0].customStyle['--insertion-delay'] = totalSlideDelay + 's';
+						courseTiles[0].updateStyles();
+
 						var newContainerHeight = 0;
 
 						if(courseTiles.length % columns === 1) {
@@ -156,13 +158,8 @@
 							this.updateStyles();
 						}
 
-						// Let loose the dogs of war (that is, start animation)
+						//Start animation
 						this.toggleClass('animate', true, container);
-
-						setTimeout(function(courseTiles) {
-							this.toggleClass('animate-insertion', false, courseTiles[0]);
-							this.toggleClass('animate', false, container);
-						}.bind(this, courseTiles), 3000);
 					}.bind(this, container, 3);
 
 					// Get container template to add event listener to
@@ -273,7 +270,11 @@
 			},
 			get courseTileItemCount() {
 				return this.courseEntities.length;
-			}
+			},
+			_onTileInsertionComplete: function(e) {
+				this.toggleClass('animate', false, this);
+				this.toggleClass('animate', false, this.$$('.my-courses-container'));
+			},
 		});
 	</script>
 </dom-module>
diff --git a/d2l-course-tile-styles.html b/d2l-course-tile-styles.html
index 3c68ef2..135f458 100644
--- a/d2l-course-tile-styles.html
+++ b/d2l-course-tile-styles.html
@@ -43,8 +43,14 @@
 			transform: scale(1.05);
 			box-shadow: 3px 2px 10px rgba(0, 0, 0, 0.3);
 		}
+		.tile-container.animate-insertion-pre{
+			animation: var(--insertion-delay) normal tile-pre-insertion;
+			animation-duration: var(--insertion-delay);
+			pointer-events: none;
+		}
 		.tile-container.animate-insertion {
 			animation: 0.6s forwards scale-and-fade-in;
+			animation-direction: normal;
 			pointer-events: none;
 		}
 		.tile-container.unpin {
@@ -201,6 +207,7 @@
 
 		:host(.animate-insertion) {
 			position: absolute;
+			z-index: 100;
 		}
 
 		@keyframes slideover {
@@ -211,6 +218,17 @@
 				transform: translate(var(--new-col), var(--new-row));
 			}
 		}
+
+		/* Use an animation for this so we can catch the animation completion by name. Hacky and there's probably a better way..
+		   We could just use a setTimeout of course, but I think that decentralizes the animation-switch logic too much.*/
+		@keyframes tile-pre-insertion {
+			from {
+				opacity: 0;
+			}
+			to {
+				opacity: 0;
+			}
+		}
 		</style>
 	</template>
 </dom-module>
diff --git a/d2l-course-tile.html b/d2l-course-tile.html
index 757b3d4..94153f2 100644
--- a/d2l-course-tile.html
+++ b/d2l-course-tile.html
@@ -125,11 +125,9 @@
 			},
 			attached: function() {
 				if (this.animateInsertion) {
-					if(this.animateInsertionDelay === 0) {
-						var tileContainer = this.$$('.tile-container');
-						this.toggleClass('animate-insertion', true, tileContainer);
-						this.toggleClass('animate-insertion', true, this);
-					}
+					var tileContainer = this.$$('.tile-container');
+					this.toggleClass('animate-insertion-pre', true, tileContainer);
+					this.toggleClass('animate-insertion-pre', true, this);
 				}
 			},
 			updatePreferencesOnResponse: function(response) {
@@ -274,12 +272,20 @@
 				this.toggleClass('unpin-hovered', e.detail.hoverState, courseTile);
 			},
 			_onAnimationComplete: function(e) {
+				var tileContainer = this.$$('.tile-container');
+
 				if (e.animationName.includes('scale-and-fade-out')) {
 					this.fire('tile-remove-complete', {course: this._enrollmentEntity, pinned: this.pendingPinAction});
 				} else if (e.animationName.includes('scale-and-fade-in')) {
-					var tileContainer = this.$$('.tile-container');
 					this.toggleClass('animate-insertion', false, tileContainer);
 					this.toggleClass('animate-insertion', false, this);
+					this.toggleClass('animate-insertion', false, this.$$('.tile-container'));
+					this.fire('tile-insert-complete', {course: this._enrollmentEntity, pinned: this.pendingPinAction});
+				} else if (e.animationName.includes('tile-pre-insertion')) {
+					this.toggleClass('animate-insertion-pre', false, tileContainer);
+					this.toggleClass('animate-insertion-pre', false, this);
+					this.toggleClass('animate-insertion', true, tileContainer);
+					this.toggleClass('animate-insertion', true, this);
 				}
 			},
 			pendingPinAction: false,
-- 
2.7.2.windows.1


From d1cde34a63b37773da585c0e000d6a3feae5e761 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 13:11:36 -0500
Subject: [PATCH 12/18] Container height is set more properly now, as is tile
 spacing, but it's hacky (margin is set statically rather than calculated)

---
 d2l-course-tile-grid.html | 48 ++++++++++++++++++++++-------------------------
 1 file changed, 22 insertions(+), 26 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 5568288..bc50f8b 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -119,7 +119,7 @@
 						// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
 						// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
 						var courseTiles = container.querySelectorAll('d2l-course-tile');
-						var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
+						var rowHeights = this._getNewRowOffsets(container, courseTiles, columns);
 						var totalSlideDelay = 0;
 
 						// Set new positions for course tiles (but not new tile!)
@@ -135,14 +135,15 @@
 							var courseTileRect = courseTileRects[i];
 							var containerWidth = container.offsetWidth;
 							var nextCol = i % columns;
-							var newRow = rowOffsets[Math.floor(i / columns)];
+							var newRow = Math.floor(i / columns);
+							var newRowPx = newRow > 0 ? rowHeights[newRow - 1] : 0;
 							var newCol = courseTile.offsetWidth * nextCol;
 
 							newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
 							totalSlideDelay += 0.1;
 
 							courseTile.customStyle['--new-col'] = newCol + 'px';
-							courseTile.customStyle['--new-row'] = newRow + 'px';
+							courseTile.customStyle['--new-row'] = newRowPx + 'px';
 							courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.1) + 's';
 							courseTile.updateStyles();
 						};
@@ -150,13 +151,10 @@
 						courseTiles[0].customStyle['--insertion-delay'] = totalSlideDelay + 's';
 						courseTiles[0].updateStyles();
 
-						var newContainerHeight = 0;
+						var newContainerHeight = rowHeights[rowHeights.length - 1];
 
-						if(courseTiles.length % columns === 1) {
-							// If we've added a new row, set new container height
-							this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
-							this.updateStyles();
-						}
+						this.customStyle['--container-height-new'] = newContainerHeight + 'px';
+						this.updateStyles();
 
 						//Start animation
 						this.toggleClass('animate', true, container);
@@ -189,7 +187,8 @@
 					var currCol = Math.floor(courseTileRect.left - parentRect.left);
 					var currRow = (courseTileRect.top - parentRect.top);
 					var nextCol = (i + 1) % columns;
-					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
+					var newRow = Math.floor(i / columns);
+					var newRowPx = newRow > 0 ? rowOffsets[newRow - 1] : 0;
 					var newCol = courseTile.offsetWidth * nextCol;
 
 					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
@@ -201,12 +200,12 @@
 					currCol = currCol + 'px';
 					currRow = currRow + 'px';
 					newCol += 'px';
-					newRow += 'px';
+					newRowPx += 'px';
 
 					courseTile.customStyle['--col'] = currCol;
 					courseTile.customStyle['--row'] = currRow;
 					courseTile.customStyle['--new-col'] = newCol;
-					courseTile.customStyle['--new-row'] = newRow;
+					courseTile.customStyle['--new-row'] = newRowPx;
 					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
 					courseTile.updateStyles();
 
@@ -225,28 +224,25 @@
 
 			},
 			_getNewRowOffsets: function(container, items, columns) {
-				var numRows = Math.floor(items.length/columns) + 1;
-				var rowOffsets = Array.apply(null, Array(numRows)).map(function() {return 0;});
+				var numRows = Math.floor(items.length/columns);
+				var rowHeights = Array.apply(null, Array(numRows + 1)).map(function() {return 0;});
 
-				for(var count = 0; count <= items.length - 1; count++)  {
+				for(var count = 0; count < items.length; count++)  {
 					var currRow = Math.floor(count / columns);
-					var nextRow = currRow + 1;
 					var itemHeight = items[count].offsetHeight;
 
-					if((count % columns) === 0) {
-						// Will go into next row
-						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight) + 12;
-					} else {
-						// Will go into same row
-						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight) + 12;
-					}
+					rowHeights[currRow] = Math.max(rowHeights[currRow], itemHeight);
 				}
 
-				for(count = 1; count < rowOffsets.length; count++) {
-					rowOffsets[count] += rowOffsets[count - 1];
+				for(count = 0; count < rowHeights.length; count++) {
+					rowHeights[count] += 8;
+
+					if(count > 0) {
+						rowHeights[count] += rowHeights[count - 1];
+					}
 				}
 
-				return rowOffsets;
+				return rowHeights;
 			},
 			_getItemPositions: function(elements) {
 				// Gets item offsets prior to animation
-- 
2.7.2.windows.1


From b1f50833f2536747900c81ff13ef7a4190b41f5d Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 13:32:31 -0500
Subject: [PATCH 13/18] Stage 1 of generalizing tile slide

---
 d2l-course-tile-grid.html | 236 +++++++++++++++++++---------------------------
 1 file changed, 99 insertions(+), 137 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index bc50f8b..08a9c8d 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -71,157 +71,70 @@
 				var newCourse = newCourseEntities.base[0];
 
 				if(newCourse) {
-					//*******************************
-					// Set up pre-animation stuff:
-					// 	*Save all of the existing tile/container positions, for intitial positioning
-					//  *Set all initial positions/sizes/whatever on elements
-					// 	*Set absolute positioning/etc on elements, so that new course tile won't break anything when we insert it
-					//   	* May have to have a "pre-animation" CSS class
-					//******************************
-					// Get all course tiles in container
-					var container = this.$$('.my-courses-container');
-					var courseTiles = container.querySelectorAll('d2l-course-tile');
-					// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
-					var parentRect = container.getBoundingClientRect();
-					// We need to know course tile properties prior to any animation taking place
-					var courseTileRects = this._getItemPositions(courseTiles);
-					var containerWidth = container.offsetWidth;
-					var containerHeight = container.offsetHeight;
-
-					// Set initial values for container
-					this.customStyle['--container-width'] = containerWidth + 'px';
-					this.customStyle['--container-height'] = containerHeight + 'px';
-					this.updateStyles();
-
-					// Set intial values for course tiles
-					for(var i = 0; i < courseTiles.length; i++) {
-						var courseTile = courseTiles[i];
-						var courseTileRect = courseTileRects[i];
-						var col = (courseTileRect.left - parentRect.left) + 'px';
-
-						courseTile.customStyle['--col'] = col;
-						courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
-						courseTile.updateStyles();
-					};
-
-					//*******************************
-					// Add new course tile:
-					// 	*Ensure course tile info is set in "in-transition" list(s), including delay
-					// 	*Prepend to course entities list - delay until now as it affects the DOM
-					//*******************************
-					this._tilesInPinStateTransition.push(newCourse.properties.id);
-					this._nextCourseInsertionDelaySecs = 1.0;
-					this.unshift('courseEntities', newCourse);
-
-					var onNewCourseAdded = function(container, columns) {
-						// Calculate new row/container heights, now that we have the height of the new tile
-						// @NOTE: Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
-						// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
-						// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
-						var courseTiles = container.querySelectorAll('d2l-course-tile');
-						var rowHeights = this._getNewRowOffsets(container, courseTiles, columns);
-						var totalSlideDelay = 0;
-
-						// Set new positions for course tiles (but not new tile!)
-						for(var i = 1; i < courseTiles.length; i++) {
-							var leftMarginPct = [
-								[0], //1 column
-								[0, .01666], //2 columns
-								[0, .011, .0225], //3 columns
-								[0, .009, .018, .027] //4 columns
-							];
-
-							var courseTile = courseTiles[i];
-							var courseTileRect = courseTileRects[i];
-							var containerWidth = container.offsetWidth;
-							var nextCol = i % columns;
-							var newRow = Math.floor(i / columns);
-							var newRowPx = newRow > 0 ? rowHeights[newRow - 1] : 0;
-							var newCol = courseTile.offsetWidth * nextCol;
-
-							newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
-							totalSlideDelay += 0.1;
-
-							courseTile.customStyle['--new-col'] = newCol + 'px';
-							courseTile.customStyle['--new-row'] = newRowPx + 'px';
-							courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.1) + 's';
-							courseTile.updateStyles();
-						};
-
-						courseTiles[0].customStyle['--insertion-delay'] = totalSlideDelay + 's';
-						courseTiles[0].updateStyles();
-
-						var newContainerHeight = rowHeights[rowHeights.length - 1];
-
-						this.customStyle['--container-height-new'] = newContainerHeight + 'px';
-						this.updateStyles();
-
-						//Start animation
-						this.toggleClass('animate', true, container);
-					}.bind(this, container, 3);
-
-					// Get container template to add event listener to
-					var gridTemplate = container.querySelector('template');
-					gridTemplate.addEventListener('dom-change', onNewCourseAdded);
-
-					this.splice('courseEntitiesQueue', 0, 1);
+					this._animateTileSlide(true, newCourse);
 				}
 			},
-			_tilesInPinStateTransition: null,
-			_nextCourseInsertionDelaySecs: 0,
-			_animateTileSlide: function(container, isInsertion, position, columns) {
-				// Resize container
-				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
-				this.toggleClass('animate', true, container);
 
+			_tilesInPinStateTransition: null,
+			_animateTileSlide: function(isInsertion, data) {
+				var newCourse = null;
+				var removeIndex = 0;
+
+				if(isInsertion) {
+					newCourse = data;
+				} else {
+					removeIndex = data;
+				}
+				//*******************************
+				// Set up pre-animation stuff:
+				// 	*Save all of the existing tile/container positions, for intitial positioning
+				//  *Set all initial positions/sizes/whatever on elements
+				// 	*Set absolute positioning/etc on elements, so that new course tile won't break anything when we insert it
+				//   	* May have to have a "pre-animation" CSS class
+				//******************************
+				// Get all course tiles in container
+				var container = this.$$('.my-courses-container');
+				var courseTiles = container.querySelectorAll('d2l-course-tile');
+				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
+				var parentRect = container.getBoundingClientRect();
+				// We need to know course tile properties prior to any animation taking place
+				var courseTileRects = this._getItemPositions(courseTiles);
+				var containerWidth = container.offsetWidth;
+				var containerHeight = container.offsetHeight;
+
+				// Set initial values for container
+				this.customStyle['--container-width'] = containerWidth + 'px';
+				this.customStyle['--container-height'] = containerHeight + 'px';
 				this.updateStyles();
 
-				setTimeout(function(container) {
-					this.toggleClass('animate', false, container);
-				}.bind(this, container), 4000);
-
+				// Set intial values for course tiles
 				for(var i = 0; i < courseTiles.length; i++) {
 					var courseTile = courseTiles[i];
 					var courseTileRect = courseTileRects[i];
-					var containerWidth = container.offsetWidth;
-					var currCol = Math.floor(courseTileRect.left - parentRect.left);
-					var currRow = (courseTileRect.top - parentRect.top);
-					var nextCol = (i + 1) % columns;
-					var newRow = Math.floor(i / columns);
-					var newRowPx = newRow > 0 ? rowOffsets[newRow - 1] : 0;
-					var newCol = courseTile.offsetWidth * nextCol;
-
-					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
+					var col = (courseTileRect.left - parentRect.left) + 'px';
 
-					if((i % columns) !== 0) {
-						currCol -= 6;
-					}
-
-					currCol = currCol + 'px';
-					currRow = currRow + 'px';
-					newCol += 'px';
-					newRowPx += 'px';
-
-					courseTile.customStyle['--col'] = currCol;
-					courseTile.customStyle['--row'] = currRow;
-					courseTile.customStyle['--new-col'] = newCol;
-					courseTile.customStyle['--new-row'] = newRowPx;
-					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
+					courseTile.customStyle['--col'] = col;
+					courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
+					courseTile.customStyle['--new-col'] = col;
+					courseTile.customStyle['--new-row'] = (courseTileRect.top - parentRect.top) + 'px';
 					courseTile.updateStyles();
-
-					courseTile.classList.add('animate');
-
-					setTimeout(function() {
-						this.classList.remove('animate');
-					}.bind(courseTile), 2000);
 				};
 
-				setTimeout(function() {
-					this.toggleClass('animate', true, container);
-				}.bind(this), 2000);
+				//*******************************
+				// Add new course tile:
+				// 	*Ensure course tile info is set in "in-transition" list(s), including delay
+				// 	*Prepend to course entities list - delay until now as it affects the DOM
+				//*******************************
+				if(isInsertion) {
+					this._tilesInPinStateTransition.push(newCourse.properties.id);
+					this.unshift('courseEntities', newCourse);
+				}
 
-				this.updateStyles();
+				// Get container template to add event listener to
+				var gridTemplate = container.querySelector('template');
+				gridTemplate.addEventListener('dom-change', this._doTileSlideAnimation.bind(this, true, container, 3));
 
+				this.splice('courseEntitiesQueue', 0, 1);
 			},
 			_getNewRowOffsets: function(container, items, columns) {
 				var numRows = Math.floor(items.length/columns);
@@ -244,6 +157,55 @@
 
 				return rowHeights;
 			},
+			_doTileSlideAnimation: function (isInsertion, container, columns) {
+				// Calculate new row/container heights, now that we have the height of the new tile
+				// @NOTE: Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
+				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
+				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
+				var courseTiles = container.querySelectorAll('d2l-course-tile');
+				var rowHeights = this._getNewRowOffsets(container, courseTiles, columns);
+				var totalSlideDelay = 0;
+				var parentRect = container.getBoundingClientRect();
+				// We need to know course tile properties prior to any animation taking place
+				var courseTileRects = this._getItemPositions(courseTiles);
+
+				// Set new positions for course tiles (but not new tile!)
+				for(var i = 1; i < courseTiles.length; i++) {
+					var leftMarginPct = [
+						[0], //1 column
+						[0, .01666], //2 columns
+						[0, .011, .0225], //3 columns
+						[0, .009, .018, .027] //4 columns
+					];
+
+					var courseTile = courseTiles[i];
+					var courseTileRect = courseTileRects[i];
+					var containerWidth = container.offsetWidth;
+					var nextCol = i % columns;
+					var newRow = Math.floor(i / columns);
+					var newRowPx = newRow > 0 ? rowHeights[newRow - 1] : 0;
+					var newCol = courseTile.offsetWidth * nextCol;
+
+					newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
+					totalSlideDelay += 0.1;
+
+					courseTile.customStyle['--new-col'] = newCol + 'px';
+					courseTile.customStyle['--new-row'] = newRowPx + 'px';
+					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.1) + 's';
+					courseTile.updateStyles();
+				};
+
+				courseTiles[0].customStyle['--insertion-delay'] = totalSlideDelay + 's';
+				courseTiles[0].updateStyles();
+
+				var newContainerHeight = rowHeights[rowHeights.length - 1];
+
+				this.customStyle['--container-height-new'] = newContainerHeight + 'px';
+				this.updateStyles();
+
+				//Start animation
+				this.toggleClass('animate', true, container);
+			},
 			_getItemPositions: function(elements) {
 				// Gets item offsets prior to animation
 				var boundingRects = [];
-- 
2.7.2.windows.1


From e40e31765b164287f91ea5577a9e27d1788172ec Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 14:32:43 -0500
Subject: [PATCH 14/18] Kind-of working for tile removal as well as insertion
 (though removal doesn't terminate correctly, as it isn't listening for any
 events at that point)

---
 d2l-course-tile-grid.html | 74 +++++++++++++++++++++++++++++++++++++----------
 1 file changed, 59 insertions(+), 15 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 08a9c8d..aa934f4 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -57,7 +57,9 @@
 				Polymer.D2L.MyCourses.InteractionDetectionBehavior
 			],
 			listeners: {
-				'tile-insert-complete': '_onTileInsertionComplete'
+				'tile-insert-complete': '_onTileInsertionComplete',
+				'course-pinned': '_onCoursePinAction',
+				'course-unpinned': '_onCoursePinAction'
 			},
 			observers: [
 				'_onCourseEntitiesQueueChanged(courseEntitiesQueue.*)'
@@ -78,7 +80,7 @@
 			_tilesInPinStateTransition: null,
 			_animateTileSlide: function(isInsertion, data) {
 				var newCourse = null;
-				var removeIndex = 0;
+				var removeIndex = null;
 
 				if(isInsertion) {
 					newCourse = data;
@@ -131,17 +133,31 @@
 				}
 
 				// Get container template to add event listener to
-				var gridTemplate = container.querySelector('template');
-				gridTemplate.addEventListener('dom-change', this._doTileSlideAnimation.bind(this, true, container, 3));
+				// @NOTE: Should be able to call render() here instead, but doesn't seem to work..
+				if(isInsertion) {
+					var gridTemplate = container.querySelector('template');
+					gridTemplate.addEventListener('dom-change', this._doTileSlideAnimation.bind(this, true, removeIndex || 0, container, 3));
+				} else {
+					this._doTileSlideAnimation(false, removeIndex, container, 3);
+				}
 
 				this.splice('courseEntitiesQueue', 0, 1);
 			},
-			_getNewRowOffsets: function(container, items, columns) {
+			_getNewRowHeights: function(container, items, columns, skipList) {
 				var numRows = Math.floor(items.length/columns);
 				var rowHeights = Array.apply(null, Array(numRows + 1)).map(function() {return 0;});
+				var _skipList = skipList || [];
+				var skipCount = 0;
 
 				for(var count = 0; count < items.length; count++)  {
-					var currRow = Math.floor(count / columns);
+					if (_skipList.includes(count)) {
+						skipCount++;
+						continue
+					}
+
+					var _count = count - skipCount;
+
+					var currRow = Math.floor(_count / columns);
 					var itemHeight = items[count].offsetHeight;
 
 					rowHeights[currRow] = Math.max(rowHeights[currRow], itemHeight);
@@ -157,20 +173,21 @@
 
 				return rowHeights;
 			},
-			_doTileSlideAnimation: function (isInsertion, container, columns) {
+			_doTileSlideAnimation: function (isInsertion, tileIndex, container, columns) {
 				// Calculate new row/container heights, now that we have the height of the new tile
 				// @NOTE: Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
 				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
 				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
 				var courseTiles = container.querySelectorAll('d2l-course-tile');
-				var rowHeights = this._getNewRowOffsets(container, courseTiles, columns);
+				var rowHeights = this._getNewRowHeights(container, courseTiles, columns);
 				var totalSlideDelay = 0;
 				var parentRect = container.getBoundingClientRect();
 				// We need to know course tile properties prior to any animation taking place
 				var courseTileRects = this._getItemPositions(courseTiles);
+				var startIndex = isInsertion ? (tileIndex + 1) : 0;
 
 				// Set new positions for course tiles (but not new tile!)
-				for(var i = 1; i < courseTiles.length; i++) {
+				for(var i = startIndex; i < courseTiles.length; i++) {
 					var leftMarginPct = [
 						[0], //1 column
 						[0, .01666], //2 columns
@@ -178,29 +195,40 @@
 						[0, .009, .018, .027] //4 columns
 					];
 
+					if(!isInsertion && (i == tileIndex)) {
+						continue;
+					}
+
+					var newIndex = isInsertion ? i : (i - 1);
+
 					var courseTile = courseTiles[i];
 					var courseTileRect = courseTileRects[i];
 					var containerWidth = container.offsetWidth;
-					var nextCol = i % columns;
-					var newRow = Math.floor(i / columns);
+					var nextCol = newIndex % columns;
+					var newRow = Math.floor(newIndex / columns);
 					var newRowPx = newRow > 0 ? rowHeights[newRow - 1] : 0;
 					var newCol = courseTile.offsetWidth * nextCol;
 
 					newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
 					totalSlideDelay += 0.1;
+					var delayTime = 0;
+
+					if(isInsertion) {
+						delayTime = (courseTiles.length - i) * 0.1;
+					} else {
+						delayTime = i * 0.1;
+					}
 
 					courseTile.customStyle['--new-col'] = newCol + 'px';
 					courseTile.customStyle['--new-row'] = newRowPx + 'px';
-					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.1) + 's';
+					courseTile.customStyle['--delay'] =  delayTime + 's';
 					courseTile.updateStyles();
 				};
 
 				courseTiles[0].customStyle['--insertion-delay'] = totalSlideDelay + 's';
 				courseTiles[0].updateStyles();
 
-				var newContainerHeight = rowHeights[rowHeights.length - 1];
-
-				this.customStyle['--container-height-new'] = newContainerHeight + 'px';
+				this.customStyle['--container-height-new'] = rowHeights[rowHeights.length - 1] + 'px';
 				this.updateStyles();
 
 				//Start animation
@@ -233,6 +261,22 @@
 				this.toggleClass('animate', false, this);
 				this.toggleClass('animate', false, this.$$('.my-courses-container'));
 			},
+			_onCoursePinAction: function(e) {
+				// If a course was (un)pinned from this grid (ie. a course tile had a pin action invoked on it, such that it (should) leave
+				// this grid, then we need to slide other tiles in to fill its place
+
+				// Find the index of the course just (un)pinned
+				var removeIndex = -1;
+
+				for(var i = 0; i < this.courseEntities.length; i++) {
+					if(this.courseEntities[i].properties.id === e.detail.course.properties.id) {
+						removeIndex = i;
+						break;
+					}
+				}
+
+				this._animateTileSlide(false, removeIndex);
+			}
 		});
 	</script>
 </dom-module>
-- 
2.7.2.windows.1


From fabec9b9a39a3d81ac3898c3dbd52fbb2ccf19e5 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 19:06:48 -0500
Subject: [PATCH 15/18] Pretty much working.. except when there are a lot of
 tiles, it's slow as hell, due to a bunch of property accesses/functions that
 force reflow of the page. What have I done.

---
 d2l-all-courses.html                 |  5 ++-
 d2l-course-management-behavior.html  |  6 ++--
 d2l-course-tile-grid.html            | 60 +++++++++++++++++++++---------------
 d2l-course-tile-region-behavior.html |  9 +++---
 d2l-course-tile-region.html          |  4 +--
 d2l-course-tile-styles.html          |  5 +--
 6 files changed, 53 insertions(+), 36 deletions(-)

diff --git a/d2l-all-courses.html b/d2l-all-courses.html
index 2002569..258f8f5 100644
--- a/d2l-all-courses.html
+++ b/d2l-all-courses.html
@@ -34,10 +34,13 @@
 				Polymer.D2L.MyCourses.LocalizeBehavior,
 				Polymer.D2L.MyCourses.CourseManagementBehavior
 			],
+			ready: function() {
+				this.usePendingLists = true;
+			},
 			focusableNodesOverride: function() {
 				var courseTileFocusables = [];
 
-				Polymer.dom(this.root).querySelectorAll('d2l-course-tile').forEach(function(courseTile) {
+				Polymer.dom(this.root).getElementsByTagName('d2l-course-tile').forEach(function(courseTile) {
 					Array.prototype.push.apply(courseTileFocusables, Polymer.dom(courseTile.root).querySelectorAll('a'));
 				});
 
diff --git a/d2l-course-management-behavior.html b/d2l-course-management-behavior.html
index 72fcae3..4a0204b 100644
--- a/d2l-course-management-behavior.html
+++ b/d2l-course-management-behavior.html
@@ -41,13 +41,15 @@
 				},
 				usePendingLists: {
 					type: Boolean,
-					value: true
+					value: false
 				}
 			},
 			listeners: {
 				'course-pinned': '_onCoursePinned',
 				'course-unpinned': '_onCourseUnpinned',
-				'tile-remove-complete': '_onTileRemoveComplete'
+				'tile-remove-complete': '_onTileRemoveComplete',
+				'course-pin-complete': '_onCoursePinComplete',
+				'course-unpin-complete': '_onCourseUnpinComplete'
 			},
 			observers: [
 				'_onPinnedCoursesEntitiesChanged(pinnedCoursesEntities.*)'
diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index aa934f4..9a2b4b3 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -81,6 +81,7 @@
 			_animateTileSlide: function(isInsertion, data) {
 				var newCourse = null;
 				var removeIndex = null;
+				var columns = this._numCols;
 
 				if(isInsertion) {
 					newCourse = data;
@@ -96,11 +97,11 @@
 				//******************************
 				// Get all course tiles in container
 				var container = this.$$('.my-courses-container');
-				var courseTiles = container.querySelectorAll('d2l-course-tile');
+				var courseTiles = container.getElementsByTagName('d2l-course-tile');
 				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
 				var parentRect = container.getBoundingClientRect();
 				// We need to know course tile properties prior to any animation taking place
-				var courseTileRects = this._getItemPositions(courseTiles);
+				var courseTileRects = this._getCourseTileBoundingRects(courseTiles);
 				var containerWidth = container.offsetWidth;
 				var containerHeight = container.offsetHeight;
 
@@ -113,12 +114,13 @@
 				for(var i = 0; i < courseTiles.length; i++) {
 					var courseTile = courseTiles[i];
 					var courseTileRect = courseTileRects[i];
-					var col = (courseTileRect.left - parentRect.left) + 'px';
+					var posX = courseTileRect.left - parentRect.left;
+					var posY = courseTileRect.top - parentRect.top;
 
-					courseTile.customStyle['--col'] = col;
-					courseTile.customStyle['--row'] = (courseTileRect.top - parentRect.top) + 'px';
-					courseTile.customStyle['--new-col'] = col;
-					courseTile.customStyle['--new-row'] = (courseTileRect.top - parentRect.top) + 'px';
+					courseTile.customStyle['--col'] = posX + 'px';
+					courseTile.customStyle['--row'] = posY + 'px';
+					courseTile.customStyle['--new-col'] = posX + 'px';
+					courseTile.customStyle['--new-row'] = posY + 'px';
 					courseTile.updateStyles();
 				};
 
@@ -136,12 +138,11 @@
 				// @NOTE: Should be able to call render() here instead, but doesn't seem to work..
 				if(isInsertion) {
 					var gridTemplate = container.querySelector('template');
-					gridTemplate.addEventListener('dom-change', this._doTileSlideAnimation.bind(this, true, removeIndex || 0, container, 3));
+					gridTemplate.addEventListener('dom-change', this._doTileSlideAnimation.bind(this, true, removeIndex || 0, container, columns));
+					this.splice('courseEntitiesQueue', 0, 1);
 				} else {
-					this._doTileSlideAnimation(false, removeIndex, container, 3);
+					this._doTileSlideAnimation(false, removeIndex, container, columns);
 				}
-
-				this.splice('courseEntitiesQueue', 0, 1);
 			},
 			_getNewRowHeights: function(container, items, columns, skipList) {
 				var numRows = Math.floor(items.length/columns);
@@ -152,11 +153,10 @@
 				for(var count = 0; count < items.length; count++)  {
 					if (_skipList.includes(count)) {
 						skipCount++;
-						continue
+						continue;
 					}
 
 					var _count = count - skipCount;
-
 					var currRow = Math.floor(_count / columns);
 					var itemHeight = items[count].offsetHeight;
 
@@ -179,12 +179,17 @@
 				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
 				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
 				var courseTiles = container.querySelectorAll('d2l-course-tile');
-				var rowHeights = this._getNewRowHeights(container, courseTiles, columns);
+				var skipList = [];
+				if(!isInsertion) {
+					skipList.push(tileIndex);
+				}
+
+				var rowHeights = this._getNewRowHeights(container, courseTiles, columns, skipList);
 				var totalSlideDelay = 0;
 				var parentRect = container.getBoundingClientRect();
 				// We need to know course tile properties prior to any animation taking place
-				var courseTileRects = this._getItemPositions(courseTiles);
-				var startIndex = isInsertion ? (tileIndex + 1) : 0;
+				var courseTileRects = this._getCourseTileBoundingRects(courseTiles);
+				var startIndex = !isInsertion ? (tileIndex + 1) : 0;
 
 				// Set new positions for course tiles (but not new tile!)
 				for(var i = startIndex; i < courseTiles.length; i++) {
@@ -195,12 +200,7 @@
 						[0, .009, .018, .027] //4 columns
 					];
 
-					if(!isInsertion && (i == tileIndex)) {
-						continue;
-					}
-
 					var newIndex = isInsertion ? i : (i - 1);
-
 					var courseTile = courseTiles[i];
 					var courseTileRect = courseTileRects[i];
 					var containerWidth = container.offsetWidth;
@@ -214,9 +214,9 @@
 					var delayTime = 0;
 
 					if(isInsertion) {
-						delayTime = (courseTiles.length - i) * 0.1;
+						delayTime = ((courseTiles.length - 1) - i) * 0.025;
 					} else {
-						delayTime = i * 0.1;
+						delayTime = 0.1 + (i * 0.025);
 					}
 
 					courseTile.customStyle['--new-col'] = newCol + 'px';
@@ -233,8 +233,14 @@
 
 				//Start animation
 				this.toggleClass('animate', true, container);
+
+				if(!isInsertion) {
+					setTimeout(function(container) {
+						this.toggleClass('animate', false, container);
+					}.bind(this, container), (totalSlideDelay + 1.0) * 1000);
+				}
 			},
-			_getItemPositions: function(elements) {
+			_getCourseTileBoundingRects: function(elements) {
 				// Gets item offsets prior to animation
 				var boundingRects = [];
 
@@ -275,7 +281,11 @@
 					}
 				}
 
-				this._animateTileSlide(false, removeIndex);
+				//Flag that the last tile's animation completion should end absolute positioning of this grid
+
+				if(removeIndex >= 0) {
+					this._animateTileSlide(false, removeIndex);
+				}
 			}
 		});
 	</script>
diff --git a/d2l-course-tile-region-behavior.html b/d2l-course-tile-region-behavior.html
index ca52a31..69761f3 100644
--- a/d2l-course-tile-region-behavior.html
+++ b/d2l-course-tile-region-behavior.html
@@ -71,12 +71,12 @@
 
 				containers.forEach(function(container) {
 					var width = forcedWidth || this._getAvailableWidth(container);
-					var numCols = this._calcNumColumns(width, itemCount);
 					var domNode = Polymer.dom(container);
 					var oldClassName = currentColClass(domNode);
+					this._numCols = this._calcNumColumns(width, itemCount);
 
-					if (numCols > 1) {
-						var newClassName = 'columns-' + numCols;
+					if (this._numCols > 1) {
+						var newClassName = 'columns-' + this._numCols;
 
 						if (oldClassName !== newClassName) {
 							if (oldClassName) {
@@ -120,7 +120,8 @@
 					clearTimeout(timeout);
 					timeout = setTimeout(eventHandler, delay);
 				});
-			}
+			},
+			_numCols: 0
 		};
 	})();
 </script>
diff --git a/d2l-course-tile-region.html b/d2l-course-tile-region.html
index 03435fc..92f6a9f 100644
--- a/d2l-course-tile-region.html
+++ b/d2l-course-tile-region.html
@@ -70,7 +70,7 @@
 				//******************************
 				// Get all course tiles in container
 				var container = this.querySelector('.my-courses-container');
-				var courseTiles = container.querySelectorAll('d2l-course-tile');
+				var courseTiles = container.getElementsByTagName('d2l-course-tile');
 				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
 				var parentRect = container.getBoundingClientRect();
 				// We need to know course tile properties prior to any animation taking place
@@ -107,7 +107,7 @@
 				// Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
 				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
 				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
-				courseTiles = container.querySelectorAll('d2l-course-tile');
+				courseTiles = container.getElementsByTagName('d2l-course-tile');
 				var rowOffsets = this._getNewRowOffsets(container, courseTiles, columns);
 
 				// Set new positions for course tiles
diff --git a/d2l-course-tile-styles.html b/d2l-course-tile-styles.html
index 135f458..2919ede 100644
--- a/d2l-course-tile-styles.html
+++ b/d2l-course-tile-styles.html
@@ -27,7 +27,7 @@
 			backface-visibility: hidden;
 		}
 		.tile-container.hover {
-			transition: 0.25s ease-in-out;
+			transition: 0.3s ease-in-out;
 			z-index: 100;
 			background-color: var(--d2l-color-white);
 		}
@@ -199,9 +199,10 @@
 
 		:host-context(.animate) {
 			animation-name: slideover;
-			animation-duration: 0.5s;
+			animation-duration: 0.3s;
 			animation-delay: var(--delay);
 			animation-fill-mode: both;
+			animation-timing-function: cubic-bezier(0.91, 0.03, 0.85, 0.36);
 			position: absolute;
 		}
 
-- 
2.7.2.windows.1


From bf2764a091776f5cce33cb918233e86d011516ea Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Mon, 27 Jun 2016 20:28:10 -0500
Subject: [PATCH 16/18] Reduce the amount of reflows (working state)

---
 d2l-all-courses.html      |  2 +-
 d2l-course-tile-grid.html | 19 +++++++++++--------
 2 files changed, 12 insertions(+), 9 deletions(-)

diff --git a/d2l-all-courses.html b/d2l-all-courses.html
index 258f8f5..6633caf 100644
--- a/d2l-all-courses.html
+++ b/d2l-all-courses.html
@@ -40,7 +40,7 @@
 			focusableNodesOverride: function() {
 				var courseTileFocusables = [];
 
-				Polymer.dom(this.root).getElementsByTagName('d2l-course-tile').forEach(function(courseTile) {
+				Polymer.dom(this.root).querySelectorAll('d2l-course-tile').forEach(function(courseTile) {
 					Array.prototype.push.apply(courseTileFocusables, Polymer.dom(courseTile.root).querySelectorAll('a'));
 				});
 
diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 9a2b4b3..8fbd8a9 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -97,7 +97,7 @@
 				//******************************
 				// Get all course tiles in container
 				var container = this.$$('.my-courses-container');
-				var courseTiles = container.getElementsByTagName('d2l-course-tile');
+				var courseTiles = container.querySelectorAll('d2l-course-tile');
 				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
 				var parentRect = container.getBoundingClientRect();
 				// We need to know course tile properties prior to any animation taking place
@@ -108,7 +108,6 @@
 				// Set initial values for container
 				this.customStyle['--container-width'] = containerWidth + 'px';
 				this.customStyle['--container-height'] = containerHeight + 'px';
-				this.updateStyles();
 
 				// Set intial values for course tiles
 				for(var i = 0; i < courseTiles.length; i++) {
@@ -121,7 +120,6 @@
 					courseTile.customStyle['--row'] = posY + 'px';
 					courseTile.customStyle['--new-col'] = posX + 'px';
 					courseTile.customStyle['--new-row'] = posY + 'px';
-					courseTile.updateStyles();
 				};
 
 				//*******************************
@@ -190,6 +188,8 @@
 				// We need to know course tile properties prior to any animation taking place
 				var courseTileRects = this._getCourseTileBoundingRects(courseTiles);
 				var startIndex = !isInsertion ? (tileIndex + 1) : 0;
+				var containerWidth = container.offsetWidth;
+				var courseTileWidth;
 
 				// Set new positions for course tiles (but not new tile!)
 				for(var i = startIndex; i < courseTiles.length; i++) {
@@ -203,11 +203,14 @@
 					var newIndex = isInsertion ? i : (i - 1);
 					var courseTile = courseTiles[i];
 					var courseTileRect = courseTileRects[i];
-					var containerWidth = container.offsetWidth;
 					var nextCol = newIndex % columns;
 					var newRow = Math.floor(newIndex / columns);
 					var newRowPx = newRow > 0 ? rowHeights[newRow - 1] : 0;
-					var newCol = courseTile.offsetWidth * nextCol;
+
+					// All course tiles have same width, so save once to prevent reflows
+					courseTileWidth = courseTileWidth || courseTile.offsetWidth;
+
+					var newCol = courseTileWidth * nextCol;
 
 					newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
 					totalSlideDelay += 0.1;
@@ -222,14 +225,14 @@
 					courseTile.customStyle['--new-col'] = newCol + 'px';
 					courseTile.customStyle['--new-row'] = newRowPx + 'px';
 					courseTile.customStyle['--delay'] =  delayTime + 's';
-					courseTile.updateStyles();
 				};
 
 				courseTiles[0].customStyle['--insertion-delay'] = totalSlideDelay + 's';
-				courseTiles[0].updateStyles();
 
 				this.customStyle['--container-height-new'] = rowHeights[rowHeights.length - 1] + 'px';
-				this.updateStyles();
+
+				// Update all styles once to limit reflows
+				Polymer.updateStyles();
 
 				//Start animation
 				this.toggleClass('animate', true, container);
-- 
2.7.2.windows.1


From ae1199078a5957a26919845d35fa2cb5173e9d16 Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Tue, 28 Jun 2016 17:12:47 -0500
Subject: [PATCH 17/18] Moved point at where input courseEntitiesQueue element
 is splices, as otherwise it would cause multiple tile animations to run
 (although this still seems to happen on mobile..)

Fixed issue where insertion animation delay was wrong

Fixed some mobile bugs
---
 d2l-course-tile-grid.html | 10 +++++-----
 1 file changed, 5 insertions(+), 5 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index 8fbd8a9..b7828ff 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -73,10 +73,10 @@
 				var newCourse = newCourseEntities.base[0];
 
 				if(newCourse) {
+					this.splice('courseEntitiesQueue', 0, 1);
 					this._animateTileSlide(true, newCourse);
 				}
 			},
-
 			_tilesInPinStateTransition: null,
 			_animateTileSlide: function(isInsertion, data) {
 				var newCourse = null;
@@ -137,7 +137,6 @@
 				if(isInsertion) {
 					var gridTemplate = container.querySelector('template');
 					gridTemplate.addEventListener('dom-change', this._doTileSlideAnimation.bind(this, true, removeIndex || 0, container, columns));
-					this.splice('courseEntitiesQueue', 0, 1);
 				} else {
 					this._doTileSlideAnimation(false, removeIndex, container, columns);
 				}
@@ -147,6 +146,7 @@
 				var rowHeights = Array.apply(null, Array(numRows + 1)).map(function() {return 0;});
 				var _skipList = skipList || [];
 				var skipCount = 0;
+				var courseTileHeight;
 
 				for(var count = 0; count < items.length; count++)  {
 					if (_skipList.includes(count)) {
@@ -213,7 +213,7 @@
 					var newCol = courseTileWidth * nextCol;
 
 					newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
-					totalSlideDelay += 0.1;
+					totalSlideDelay += 0.025;
 					var delayTime = 0;
 
 					if(isInsertion) {
@@ -232,7 +232,7 @@
 				this.customStyle['--container-height-new'] = rowHeights[rowHeights.length - 1] + 'px';
 
 				// Update all styles once to limit reflows
-				Polymer.updateStyles();
+				this.updateStyles();
 
 				//Start animation
 				this.toggleClass('animate', true, container);
@@ -247,7 +247,7 @@
 				// Gets item offsets prior to animation
 				var boundingRects = [];
 
-				elements.forEach(function(element) {
+				Array.prototype.forEach.call(elements, function(element) {
 					boundingRects.push(element.getBoundingClientRect());
 				});
 
-- 
2.7.2.windows.1


From e844595359cc3b1f833ebd1ccb9117470817cb3e Mon Sep 17 00:00:00 2001
From: Adam Palaniuk <Adam.Palaniuk@D2L.com>
Date: Tue, 28 Jun 2016 20:19:05 -0500
Subject: [PATCH 18/18] neon-animation implementation: definitiely the way to
 go, but try group event, like cascaded-animation

---
 d2l-course-tile-grid.html   | 167 ++++++++++++++++++++++++++++----------------
 d2l-course-tile-region.html |  89 -----------------------
 d2l-course-tile-styles.html |   1 +
 d2l-course-tile.html        |  23 +++++-
 4 files changed, 130 insertions(+), 150 deletions(-)

diff --git a/d2l-course-tile-grid.html b/d2l-course-tile-grid.html
index b7828ff..daff345 100644
--- a/d2l-course-tile-grid.html
+++ b/d2l-course-tile-grid.html
@@ -83,6 +83,8 @@
 				var removeIndex = null;
 				var columns = this._numCols;
 
+				this._clearAnimationState();
+
 				if(isInsertion) {
 					newCourse = data;
 				} else {
@@ -97,11 +99,6 @@
 				//******************************
 				// Get all course tiles in container
 				var container = this.$$('.my-courses-container');
-				var courseTiles = container.querySelectorAll('d2l-course-tile');
-				// We need to get the parent element to subtract its offset for absolute positioning, since other methods seem to fail
-				var parentRect = container.getBoundingClientRect();
-				// We need to know course tile properties prior to any animation taking place
-				var courseTileRects = this._getCourseTileBoundingRects(courseTiles);
 				var containerWidth = container.offsetWidth;
 				var containerHeight = container.offsetHeight;
 
@@ -109,19 +106,6 @@
 				this.customStyle['--container-width'] = containerWidth + 'px';
 				this.customStyle['--container-height'] = containerHeight + 'px';
 
-				// Set intial values for course tiles
-				for(var i = 0; i < courseTiles.length; i++) {
-					var courseTile = courseTiles[i];
-					var courseTileRect = courseTileRects[i];
-					var posX = courseTileRect.left - parentRect.left;
-					var posY = courseTileRect.top - parentRect.top;
-
-					courseTile.customStyle['--col'] = posX + 'px';
-					courseTile.customStyle['--row'] = posY + 'px';
-					courseTile.customStyle['--new-col'] = posX + 'px';
-					courseTile.customStyle['--new-row'] = posY + 'px';
-				};
-
 				//*******************************
 				// Add new course tile:
 				// 	*Ensure course tile info is set in "in-transition" list(s), including delay
@@ -172,47 +156,61 @@
 				return rowHeights;
 			},
 			_doTileSlideAnimation: function (isInsertion, tileIndex, container, columns) {
-				// Calculate new row/container heights, now that we have the height of the new tile
-				// @NOTE: Maybe instead of having a separate list of course entities, there can be a list of course IDs that were added to
-				// the actual courses list (eg. pinnedCoursesEntities), so that the new tiles can just be hidden until necessary and this doesn't need
-				// to be done in two phases (because all of the tiles should exist). In fact, maybe we could just listen for the dom-change event only.
-				var courseTiles = container.querySelectorAll('d2l-course-tile');
-				var skipList = [];
-				if(!isInsertion) {
-					skipList.push(tileIndex);
-				}
 
-				var rowHeights = this._getNewRowHeights(container, courseTiles, columns, skipList);
+				var courseTiles = container.querySelectorAll('d2l-course-tile');
 				var totalSlideDelay = 0;
-				var parentRect = container.getBoundingClientRect();
-				// We need to know course tile properties prior to any animation taking place
-				var courseTileRects = this._getCourseTileBoundingRects(courseTiles);
-				var startIndex = !isInsertion ? (tileIndex + 1) : 0;
-				var containerWidth = container.offsetWidth;
-				var courseTileWidth;
 
-				// Set new positions for course tiles (but not new tile!)
+				var tileWidths = [
+					1.0,
+					0.475,
+					0.32213,
+					0.241
+				];
+
+				var tileWidth = container.offsetWidth * tileWidths[columns - 1];
+				var tileHeight = tileWidth / 1.43131;
+
+				var startIndex = isInsertion ? 0 : tileIndex + 1;
+
 				for(var i = startIndex; i < courseTiles.length; i++) {
+					/*
 					var leftMarginPct = [
 						[0], //1 column
 						[0, .01666], //2 columns
 						[0, .011, .0225], //3 columns
 						[0, .009, .018, .027] //4 columns
 					];
+					*/
 
-					var newIndex = isInsertion ? i : (i - 1);
-					var courseTile = courseTiles[i];
-					var courseTileRect = courseTileRects[i];
-					var nextCol = newIndex % columns;
-					var newRow = Math.floor(newIndex / columns);
-					var newRowPx = newRow > 0 ? rowHeights[newRow - 1] : 0;
+					var leftMarginPct = [
+						[0], //1 column
+						[0, 1.75368], //2 columns
+						[0, 1.7384, 3.476857], //3 columns
+						[0, 3.73444, 7.4688797, 11.203319668] //4 columns
+					];
 
-					// All course tiles have same width, so save once to prevent reflows
-					courseTileWidth = courseTileWidth || courseTile.offsetWidth;
+/*
+					.columns-2 d2l-course-tile {
+						width: 47.5%;
+						margin-left: 0.833%;
+					}
+
+					.columns-3 d2l-course-tile {
+						width: 32.213%;
+						margin-left: 0.56%;
+					}
+
+					.columns-4 d2l-course-tile {
+						width: 24.1%;
+						margin-left: 0.45%;
+					}
+					*/
 
-					var newCol = courseTileWidth * nextCol;
+					//var newIndex = isInsertion ? i : (i - 1);
+					var courseTile = courseTiles[i];
+					//var nextCol = newIndex % columns;
+					//var nextRow = Math.floor(newIndex / columns);
 
-					newCol = newCol + (leftMarginPct[columns - 1][nextCol] * containerWidth);
 					totalSlideDelay += 0.025;
 					var delayTime = 0;
 
@@ -222,25 +220,42 @@
 						delayTime = 0.1 + (i * 0.025);
 					}
 
-					courseTile.customStyle['--new-col'] = newCol + 'px';
-					courseTile.customStyle['--new-row'] = newRowPx + 'px';
-					courseTile.customStyle['--delay'] =  delayTime + 's';
-				};
+					var x = 0,
+						y = 0;
 
-				courseTiles[0].customStyle['--insertion-delay'] = totalSlideDelay + 's';
+					var currCol = i % columns;
+					var newCol = (currCol + 1) % columns;
 
-				this.customStyle['--container-height-new'] = rowHeights[rowHeights.length - 1] + 'px';
+					if(isInsertion) {
+						if(i % columns === 0) {
+							x = columns - 1;
+							y = -1;
+						} else {
+							x = -1;
+						}
+					} else {
+						if(i % columns === 0) {
+							x = columns - 1;
+							y = -1;
+						} else {
+							x = -1;
+						}
+
+						if (y !== 0) {
+							y -= (8/tileHeight);
+						}
+					}
+
+					newCol = (currCol + x) % columns;
 
-				// Update all styles once to limit reflows
-				this.updateStyles();
+					x = ((x * 100) + leftMarginPct[columns - 1][newCol]) + '%';
+					y = (y * 100) + '%';
 
-				//Start animation
-				this.toggleClass('animate', true, container);
+					courseTile.animationConfig['tileSlide'].transformFrom = 'translate3d(0%, 0%, 0)';
+					courseTile.animationConfig['tileSlide'].transformTo = 'translate3d(' + x + ',' + y + ', 0)';
 
-				if(!isInsertion) {
-					setTimeout(function(container) {
-						this.toggleClass('animate', false, container);
-					}.bind(this, container), (totalSlideDelay + 1.0) * 1000);
+					courseTile.animationConfig['tileSlide'].timing.delay = delayTime * 1000;
+					courseTile.playAnimation('tileSlide');
 				}
 			},
 			_getCourseTileBoundingRects: function(elements) {
@@ -289,6 +304,40 @@
 				if(removeIndex >= 0) {
 					this._animateTileSlide(false, removeIndex);
 				}
+			},
+			_animationState: {
+				waiting: false,
+				isInsertion: false,
+				scaleAnimationComplete: false,
+				slideAnimationComplete: false,
+				courseTile: null,
+				courseTileIndex: null
+			},
+			_clearAnimationState: function() {
+				this._animationState.waiting = false;
+				this._animationState.isInsertion = false;
+				this._animationState.scaleAnimationComplete = false;
+				this._animationState.slideAnimationComplete = false;
+				this._animationState.courseTile = null;
+				this._animationState.courseTileIndex = null
+			},
+			_checkAnimationsComplete: function() {
+				if(this._animationState.waiting) {
+					if(this._animationState.scaleAnimationComplete &&
+					   this._animationState.slideAnimationComplete) {
+						// If removing tile, remove it; if inserting, remove class that is causing its position to be set to "absolute"
+						if(this._animationState.isInsertion) {
+							this.toggleClass('animate-insertion', false, this._animationState.courseTile);
+						} else {
+							this.splice('courseEntities', this._animationState.courseTileIndex, 1);
+						}
+
+						// Remove any general animation classes
+						this.toggleClass('animate', false, this.$$('.my-courses-container'));
+
+						this._clearAnimationState();
+					}
+				}
 			}
 		});
 	</script>
diff --git a/d2l-course-tile-region.html b/d2l-course-tile-region.html
index 92f6a9f..f24bc3f 100644
--- a/d2l-course-tile-region.html
+++ b/d2l-course-tile-region.html
@@ -145,95 +145,6 @@
 				// Let loose the dogs of war (that is, start animation)
 				this.toggle('animate', true, this.$$('.my-courses-container'));
 			},
-			_tilesInPinStateTransition: null,
-			_nextCourseInsertionDelaySecs: 0,
-			_animateTileSlide: function(container, isInsertion, position, columns) {
-				// Resize container
-				this.customStyle['--container-height-new'] = (containerHeight + courseTiles[0].offsetHeight) + 'px';
-				this.toggleClass('animate', true, container);
-
-				this.updateStyles();
-
-				setTimeout(function(container) {
-					this.toggleClass('animate', false, container);
-				}.bind(this, container), 4000);
-
-				for(var i = 0; i < courseTiles.length; i++) {
-					var courseTile = courseTiles[i];
-					var courseTileRect = courseTileRects[i];
-					var containerWidth = container.offsetWidth;
-					var currCol = Math.floor(courseTileRect.left - parentRect.left);
-					var currRow = (courseTileRect.top - parentRect.top);
-					var nextCol = (i + 1) % columns;
-					var newRow = rowOffsets[Math.floor((i + 1) / columns)];
-					var newCol = courseTile.offsetWidth * nextCol;
-
-					newCol = (newCol + leftMarginPct[columns - 1][nextCol] * containerWidth);
-
-					if((i % columns) !== 0) {
-						currCol -= 6;
-					}
-
-					currCol = currCol + 'px';
-					currRow = currRow + 'px';
-					newCol += 'px';
-					newRow += 'px';
-
-					courseTile.customStyle['--col'] = currCol;
-					courseTile.customStyle['--row'] = currRow;
-					courseTile.customStyle['--new-col'] = newCol;
-					courseTile.customStyle['--new-row'] = newRow;
-					courseTile.customStyle['--delay'] = ((courseTiles.length - i) * 0.2) + 's';
-					courseTile.updateStyles();
-
-					courseTile.classList.add('animate');
-
-					setTimeout(function() {
-						this.classList.remove('animate');
-					}.bind(courseTile), 2000);
-				};
-
-				setTimeout(function() {
-					this.toggleClass('animate', true, container);
-				}.bind(this), 2000);
-
-				this.updateStyles();
-
-			},
-			_getNewRowOffsets: function(container, items, columns) {
-				var numRows = Math.floor(items.length/columns) + 1;
-				var rowOffsets = Array.apply(null, Array(numRows)).map(function() {return 0;});
-
-				for(var count = 0; count <= items.length - 1; count++)  {
-					var currRow = Math.floor(count / columns);
-					var nextRow = currRow + 1;
-					var itemHeight = items[count].offsetHeight;
-
-					if((count % columns) === (columns - 1)) {
-						// Will go into next row
-						rowOffsets[nextRow + 1] = Math.max(rowOffsets[nextRow], itemHeight);
-					} else {
-						// Will go into same row
-						rowOffsets[nextRow] = Math.max(rowOffsets[currRow], itemHeight);
-					}
-				}
-
-				for(count = 1; count < rowOffsets.length; count++) {
-					rowOffsets[count] += rowOffsets[count - 1];
-				}
-
-				return rowOffsets;
-			},
-			_getItemPositions: function(elements) {
-				// Gets item offsets prior to animation
-				var boundingRects = [];
-
-				elements.forEach(function(element) {
-					boundingRects.push(element.getBoundingClientRect());
-				});
-
-				return boundingRects;
-			},
 			removeCourseFromTransitionList: function(courseID) {
 				var index = this._tilesInPinStateTransition.indexOf(courseID);
 
diff --git a/d2l-course-tile-styles.html b/d2l-course-tile-styles.html
index 2919ede..8411008 100644
--- a/d2l-course-tile-styles.html
+++ b/d2l-course-tile-styles.html
@@ -99,6 +99,7 @@
 		.course-text {
 			width: 100%;
 			max-height: 75px;
+			height: 3rem;
 			overflow: hidden;
 			position: relative;
 			margin-top: 0.4rem;
diff --git a/d2l-course-tile.html b/d2l-course-tile.html
index 94153f2..2fe5674 100644
--- a/d2l-course-tile.html
+++ b/d2l-course-tile.html
@@ -7,6 +7,8 @@
 <link rel="import" href="localize-behavior.html">
 <link rel="import" href="d2l-touch-menu.html">
 <link rel="import" href="d2l-touch-menu-item.html">
+<link rel="import" href="../neon-animation/neon-animation-runner-behavior.html">
+<link rel="import" href="../neon-animation/animations/transform-animation.html">
 
 <dom-module id="d2l-course-tile">
 	<template>
@@ -108,10 +110,27 @@
 				},
 				_updatePreferencesBody: {
 					type: String
+				},
+				animationConfig: {
+					value: function() {
+						return {
+							'tileSlide': {
+								name: 'transform-animation',
+								transformFrom: 'translate3d(0%, 0%, 0)',
+								transformTo: 'translate3d(100%, 100%, 0)',
+								timing: {
+									delay: 50,
+									duration: 1000
+								},
+								node: this
+							}
+						}
+					}
 				}
 			},
 			behaviors: [
-				Polymer.D2L.MyCourses.LocalizeBehavior
+				Polymer.D2L.MyCourses.LocalizeBehavior,
+				Polymer.NeonAnimationRunnerBehavior
 			],
 			listeners: {
 				'touch-pin-hover': '_onUnpinHover',
@@ -275,7 +294,7 @@
 				var tileContainer = this.$$('.tile-container');
 
 				if (e.animationName.includes('scale-and-fade-out')) {
-					this.fire('tile-remove-complete', {course: this._enrollmentEntity, pinned: this.pendingPinAction});
+					//this.fire('tile-remove-complete', {course: this._enrollmentEntity, pinned: this.pendingPinAction});
 				} else if (e.animationName.includes('scale-and-fade-in')) {
 					this.toggleClass('animate-insertion', false, tileContainer);
 					this.toggleClass('animate-insertion', false, this);
-- 
2.7.2.windows.1

